{"ast":null,"code":"import{isValidElementType}from'react-is';import invariant from\"../utils/invariant\";function validateRouteConfigMap(routeConfigs){var routeNames=Object.keys(routeConfigs);invariant(routeNames.length>0,'Please specify at least one route when configuring a navigator.');routeNames.forEach(function(routeName){var routeConfig=routeConfigs[routeName];var screenComponent=getScreenComponent(routeConfig);if(!screenComponent||!isValidElementType(screenComponent)&&!routeConfig.getScreen){throw new Error(\"The component for route '\".concat(routeName,\"' must be a React component. For example:\\n\\nimport MyScreen from './MyScreen';\\n...\\n\").concat(routeName,\": MyScreen,\\n}\\n\\nYou can also use a navigator:\\n\\nimport MyNavigator from './MyNavigator';\\n...\\n\").concat(routeName,\": MyNavigator,\\n}\"));}if(routeConfig.screen&&routeConfig.getScreen){throw new Error(\"Route '\".concat(routeName,\"' should declare a screen or a getScreen, not both.\"));}});}function getScreenComponent(routeConfig){if(!routeConfig){return null;}return routeConfig.screen?routeConfig.screen:routeConfig;}export default validateRouteConfigMap;","map":{"version":3,"names":["isValidElementType","invariant","validateRouteConfigMap","routeConfigs","routeNames","Object","keys","length","forEach","routeName","routeConfig","screenComponent","getScreenComponent","getScreen","Error","concat","screen"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-navigation/node_modules/@react-navigation/core/lib/module/routers/validateRouteConfigMap.js"],"sourcesContent":["import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Make sure the config passed e.g. to StackRouter, TabRouter has\n * the correct format, and throw a clear error if it doesn't.\n */\nfunction validateRouteConfigMap(routeConfigs) {\n  const routeNames = Object.keys(routeConfigs);\n  invariant(\n    routeNames.length > 0,\n    'Please specify at least one route when configuring a navigator.'\n  );\n\n  routeNames.forEach((routeName) => {\n    const routeConfig = routeConfigs[routeName];\n    const screenComponent = getScreenComponent(routeConfig);\n\n    if (\n      !screenComponent ||\n      (!isValidElementType(screenComponent) && !routeConfig.getScreen)\n    ) {\n      throw new Error(`The component for route '${routeName}' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n${routeName}: MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n${routeName}: MyNavigator,\n}`);\n    }\n\n    if (routeConfig.screen && routeConfig.getScreen) {\n      throw new Error(\n        `Route '${routeName}' should declare a screen or a getScreen, not both.`\n      );\n    }\n  });\n}\n\nfunction getScreenComponent(routeConfig) {\n  if (!routeConfig) {\n    return null;\n  }\n\n  return routeConfig.screen ? routeConfig.screen : routeConfig;\n}\n\nexport default validateRouteConfigMap;\n"],"mappings":"AAAA,OAASA,kBAAT,KAAmC,UAAnC,CAEA,MAAO,CAAAC,SAAP,0BAMA,QAAS,CAAAC,sBAATA,CAAgCC,YAAhC,CAA8C,CAC5C,GAAM,CAAAC,UAAU,CAAGC,MAAM,CAACC,IAAP,CAAYH,YAAZ,CAAnB,CACAF,SAAS,CACPG,UAAU,CAACG,MAAX,CAAoB,CADb,CAEP,iEAFO,CAAT,CAKAH,UAAU,CAACI,OAAX,CAAoB,SAAAC,SAAD,CAAe,CAChC,GAAM,CAAAC,WAAW,CAAGP,YAAY,CAACM,SAAD,CAAhC,CACA,GAAM,CAAAE,eAAe,CAAGC,kBAAkB,CAACF,WAAD,CAA1C,CAEA,GACE,CAACC,eAAD,EACC,CAACX,kBAAkB,CAACW,eAAD,CAAnB,EAAwC,CAACD,WAAW,CAACG,SAFxD,CAGE,CACA,KAAM,IAAI,CAAAC,KAAJ,6BAAAC,MAAA,CAAsCN,SAAtC,2FAAAM,MAAA,CAIVN,SAJU,uGAAAM,MAAA,CAWVN,SAXU,sBAAN,CAaD,CAED,GAAIC,WAAW,CAACM,MAAZ,EAAsBN,WAAW,CAACG,SAAtC,CAAiD,CAC/C,KAAM,IAAI,CAAAC,KAAJ,WAAAC,MAAA,CACMN,SADN,wDAAN,CAGD,CACF,CA5BD,EA6BD,CAED,QAAS,CAAAG,kBAATA,CAA4BF,WAA5B,CAAyC,CACvC,GAAI,CAACA,WAAL,CAAkB,CAChB,MAAO,KAAP,CACD,CAED,MAAO,CAAAA,WAAW,CAACM,MAAZ,CAAqBN,WAAW,CAACM,MAAjC,CAA0CN,WAAjD,CACD,CAED,cAAe,CAAAR,sBAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}