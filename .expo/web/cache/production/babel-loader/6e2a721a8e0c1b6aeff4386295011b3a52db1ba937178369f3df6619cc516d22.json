{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.Clipboard=void 0;var NativeClipboard_1=__importDefault(require(\"./NativeClipboard\"));exports.Clipboard={getString:function getString(){return NativeClipboard_1.default.getString();},setString:function setString(content){NativeClipboard_1.default.setString(content);},hasString:function hasString(){return NativeClipboard_1.default.hasString();},hasURL:function hasURL(){return NativeClipboard_1.default.hasURL();}};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Clipboard","NativeClipboard_1","require","getString","default","setString","content","hasString","hasURL"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/@react-native-community/clipboard/dist/Clipboard.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Clipboard = void 0;\nvar NativeClipboard_1 = __importDefault(require(\"./NativeClipboard\"));\n/**\n * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android\n */\nexports.Clipboard = {\n    /**\n     * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _getContent() {\n     *   var content = await Clipboard.getString();\n     * }\n     * ```\n     */\n    getString: function () {\n        return NativeClipboard_1.default.getString();\n    },\n    /**\n     * Set content of string type. You can use following code to set clipboard content\n     * ```javascript\n     * _setContent() {\n     *   Clipboard.setString('hello world');\n     * }\n     * ```\n     * @param the content to be stored in the clipboard.\n     */\n    setString: function (content) {\n        NativeClipboard_1.default.setString(content);\n    },\n    /**\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasString: function () {\n        return NativeClipboard_1.default.hasString();\n    },\n    /**\n     * (IOS Only)\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasURL: function () {\n        return NativeClipboard_1.default.hasURL();\n    },\n};\n"],"mappings":"AAAA,YAAY,CACZ,GAAI,CAAAA,eAAe,CAAI,IAAI,EAAI,IAAI,CAACA,eAAe,EAAK,SAAUC,GAAG,CAAE,CACnE,MAAQ,CAAAA,GAAG,EAAIA,GAAG,CAACC,UAAU,CAAID,GAAG,CAAG,CAAE,SAAS,CAAEA,GAAI,CAAC,CAC7D,CAAC,CACDE,MAAM,CAACC,cAAc,CAACC,OAAO,CAAE,YAAY,CAAE,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CAC7DD,OAAO,CAACE,SAAS,CAAG,IAAK,EAAC,CAC1B,GAAI,CAAAC,iBAAiB,CAAGR,eAAe,CAACS,OAAO,oBAAoB,CAAC,CAAC,CAIrEJ,OAAO,CAACE,SAAS,CAAG,CAShBG,SAAS,CAAE,SAAAA,UAAA,CAAY,CACnB,MAAO,CAAAF,iBAAiB,CAACG,OAAO,CAACD,SAAS,CAAC,CAAC,CAChD,CAAC,CAUDE,SAAS,CAAE,SAAAA,UAAUC,OAAO,CAAE,CAC1BL,iBAAiB,CAACG,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,CAChD,CAAC,CAUDC,SAAS,CAAE,SAAAA,UAAA,CAAY,CACnB,MAAO,CAAAN,iBAAiB,CAACG,OAAO,CAACG,SAAS,CAAC,CAAC,CAChD,CAAC,CAWDC,MAAM,CAAE,SAAAA,OAAA,CAAY,CAChB,MAAO,CAAAP,iBAAiB,CAACG,OAAO,CAACI,MAAM,CAAC,CAAC,CAC7C,CACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}