{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import invariant from\"../utils/invariant\";import getScreenForRouteName from\"./getScreenForRouteName\";import validateScreenOptions from\"./validateScreenOptions\";function applyConfig(configurer,navigationOptions,configProps){if(typeof configurer==='function'){return _objectSpread(_objectSpread({},navigationOptions),configurer(_objectSpread(_objectSpread({},configProps),{},{navigationOptions:navigationOptions})));}if(typeof configurer==='object'){return _objectSpread(_objectSpread({},navigationOptions),configurer);}return navigationOptions;}export default(function(routeConfigs,navigatorScreenConfig){return function(navigation,screenProps,theme){var state=navigation.state;var route=state;invariant(route.routeName&&typeof route.routeName==='string','Cannot get config because the route does not have a routeName.');var Component=getScreenForRouteName(routeConfigs,route.routeName);var routeConfig=routeConfigs[route.routeName];var routeScreenConfig=routeConfig===Component?null:routeConfig.navigationOptions;var componentScreenConfig=Component.navigationOptions;var configOptions={navigation:navigation,screenProps:screenProps||{},theme:theme};var outputConfig=applyConfig(navigatorScreenConfig,{},configOptions);outputConfig=applyConfig(componentScreenConfig,outputConfig,configOptions);outputConfig=applyConfig(routeScreenConfig,outputConfig,configOptions);validateScreenOptions(outputConfig,route);return outputConfig;};});","map":{"version":3,"names":["invariant","getScreenForRouteName","validateScreenOptions","applyConfig","configurer","navigationOptions","configProps","_objectSpread","routeConfigs","navigatorScreenConfig","navigation","screenProps","theme","state","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-navigation/node_modules/@react-navigation/core/lib/module/routers/createConfigGetter.js"],"sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"],"mappings":"+qBAAA,MAAO,CAAAA,SAAP,0BAEA,MAAO,CAAAC,qBAAP,+BACA,MAAO,CAAAC,qBAAP,+BAEA,QAAS,CAAAC,WAATA,CAAqBC,UAArB,CAAiCC,iBAAjC,CAAoDC,WAApD,CAAiE,CAC/D,GAAI,MAAO,CAAAF,UAAP,GAAsB,UAA1B,CAAsC,CACpC,OAAAG,aAAA,CAAAA,aAAA,IACKF,iBADE,EAEFD,UAAU,CAAAG,aAAA,CAAAA,aAAA,IACRD,WADS,MAEZD,iBAAA,CAAAA,iBAAA,EAFW,GAKhB,CACD,GAAI,MAAO,CAAAD,UAAP,GAAsB,QAA1B,CAAoC,CAClC,OAAAG,aAAA,CAAAA,aAAA,IACKF,iBADE,EAEFD,UAAA,EAEN,CACD,MAAO,CAAAC,iBAAP,CACD,CAED,eAAe,SAACG,YAAD,CAAeC,qBAAf,QAAyC,UACtDC,UADsD,CAEtDC,WAFsD,CAGtDC,KAHsD,CAInD,CACH,GAAQ,CAAAC,KAAA,CAAUH,UAAlB,CAAQG,KAAA,CACR,GAAM,CAAAC,KAAK,CAAGD,KAAd,CAEAb,SAAS,CACPc,KAAK,CAACC,SAAN,EAAmB,MAAO,CAAAD,KAAK,CAACC,SAAb,GAA2B,QADvC,CAEP,gEAFO,CAAT,CAKA,GAAM,CAAAC,SAAS,CAAGf,qBAAqB,CAACO,YAAD,CAAeM,KAAK,CAACC,SAArB,CAAvC,CAEA,GAAM,CAAAE,WAAW,CAAGT,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC,CAEA,GAAM,CAAAG,iBAAiB,CACrBD,WAAW,GAAKD,SAAhB,CAA4B,IAA5B,CAAmCC,WAAW,CAACZ,iBADjD,CAEA,GAAM,CAAAc,qBAAqB,CAAGH,SAAS,CAACX,iBAAxC,CAEA,GAAM,CAAAe,aAAa,CAAG,CAAEV,UAAF,CAAEA,UAAF,CAAcC,WAAW,CAAEA,WAAW,EAAI,EAA1C,CAA8CC,KAAA,CAAAA,KAA9C,CAAtB,CAEA,GAAI,CAAAS,YAAY,CAAGlB,WAAW,CAACM,qBAAD,CAAwB,EAAxB,CAA4BW,aAA5B,CAA9B,CACAC,YAAY,CAAGlB,WAAW,CACxBgB,qBADwB,CAExBE,YAFwB,CAGxBD,aAHwB,CAA1B,CAKAC,YAAY,CAAGlB,WAAW,CAACe,iBAAD,CAAoBG,YAApB,CAAkCD,aAAlC,CAA1B,CAEAlB,qBAAqB,CAACmB,YAAD,CAAeP,KAAf,CAArB,CAEA,MAAO,CAAAO,YAAP,CACD,CAlCD"},"metadata":{},"sourceType":"module","externalDependencies":[]}