{"ast":null,"code":"var validateFormat=function validateFormat(){};if(process.env.NODE_ENV!=='production'){validateFormat=function validateFormat(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}export default function invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;throw error;}}","map":{"version":3,"names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-navigation/node_modules/@react-navigation/native/lib/module/utils/invariant.js"],"sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function () {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"],"mappings":"AAWA,GAAI,CAAAA,cAAc,CAAG,SAAAA,eAAA,CAAY,CAAE,CAAnC,CAEA,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzCH,cAAc,CAAG,SAAAA,eAAUI,MAAV,CAAkB,CACjC,GAAIA,MAAM,GAAKC,SAAf,CAA0B,CACxB,KAAM,IAAI,CAAAC,KAAJ,CAAU,8CAAV,CAAN,CACD,CACF,CAJD,CAKD,CAED,cAAe,SAAS,CAAAC,SAATA,CAAmBC,SAAnB,CAA8BJ,MAA9B,CAAsCK,CAAtC,CAAyCC,CAAzC,CAA4CC,CAA5C,CAA+CC,CAA/C,CAAkDC,CAAlD,CAAqDC,CAArD,CAAwD,CACrEd,cAAc,CAACI,MAAD,CAAd,CAEA,GAAI,CAACI,SAAL,CAAgB,CACd,GAAI,CAAAO,KAAJ,CACA,GAAIX,MAAM,GAAKC,SAAf,CAA0B,CACxBU,KAAK,CAAG,GAAI,CAAAT,KAAJ,CACN,+HADM,CAAR,CAGD,CAJD,IAIO,CACL,GAAI,CAAAU,IAAI,CAAG,CAACP,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CAAX,CACA,GAAI,CAAAG,QAAQ,CAAG,CAAf,CACAF,KAAK,CAAG,GAAI,CAAAT,KAAJ,CACNF,MAAM,CAACc,OAAP,CAAe,KAAf,CAAsB,UAAY,CAChC,MAAO,CAAAF,IAAI,CAACC,QAAQ,EAAT,CAAX,CACD,CAFD,CADM,CAAR,CAKAF,KAAK,CAACI,IAAN,CAAa,qBAAb,CACD,CAEDJ,KAAK,CAACK,WAAN,CAAoB,CAApB,CACA,KAAM,CAAAL,KAAN,CACD,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}