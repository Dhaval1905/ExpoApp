{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import invariant from\"./utils/invariant\";var StateUtils={get:function get(state,key){return state.routes.find(function(route){return route.key===key;})||null;},indexOf:function indexOf(state,key){return state.routes.findIndex(function(route){return route.key===key;});},has:function has(state,key){return!!state.routes.some(function(route){return route.key===key;});},push:function push(state,route){invariant(StateUtils.indexOf(state,route.key)===-1,'should not push route with duplicated key %s',route.key);var routes=state.routes.slice();routes.push(route);return _objectSpread(_objectSpread({},state),{},{index:routes.length-1,routes:routes});},pop:function pop(state){if(state.index<=0){return state;}var routes=state.routes.slice(0,-1);return _objectSpread(_objectSpread({},state),{},{index:routes.length-1,routes:routes});},jumpToIndex:function jumpToIndex(state,index){if(index===state.index){return state;}invariant(!!state.routes[index],'invalid index %s to jump to',index);return _objectSpread(_objectSpread({},state),{},{index:index});},jumpTo:function jumpTo(state,key){var index=StateUtils.indexOf(state,key);invariant(index!==-1,'attempt to jump to unknown key \"%s\"',key);return StateUtils.jumpToIndex(state,index);},back:function back(state){var index=state.index-1;var route=state.routes[index];return route?StateUtils.jumpToIndex(state,index):state;},forward:function forward(state){var index=state.index+1;var route=state.routes[index];return route?StateUtils.jumpToIndex(state,index):state;},replaceAndPrune:function replaceAndPrune(state,key,route){var index=StateUtils.indexOf(state,key);var replaced=StateUtils.replaceAtIndex(state,index,route);return _objectSpread(_objectSpread({},replaced),{},{routes:replaced.routes.slice(0,index+1)});},replaceAt:function replaceAt(state,key,route){var preserveIndex=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var index=StateUtils.indexOf(state,key);var nextIndex=preserveIndex?state.index:index;var nextState=StateUtils.replaceAtIndex(state,index,route);nextState.index=nextIndex;return nextState;},replaceAtIndex:function replaceAtIndex(state,index,route){invariant(!!state.routes[index],'invalid index %s for replacing route %s',index,route.key);if(state.routes[index]===route&&index===state.index){return state;}var routes=state.routes.slice();routes[index]=route;return _objectSpread(_objectSpread({},state),{},{index:index,routes:routes});},reset:function reset(state,routes,index){invariant(routes.length&&Array.isArray(routes),'invalid routes to replace');var nextIndex=index===undefined?routes.length-1:index;if(state.routes.length===routes.length&&state.index===nextIndex){var compare=function compare(route,ii){return routes[ii]===route;};if(state.routes.every(compare)){return state;}}invariant(!!routes[nextIndex],'invalid index %s to reset',nextIndex);return _objectSpread(_objectSpread({},state),{},{index:nextIndex,routes:routes});}};export default StateUtils;","map":{"version":3,"names":["invariant","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","_objectSpread","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","arguments","undefined","nextIndex","nextState","reset","Array","isArray","compare","ii","every"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-navigation/node_modules/@react-navigation/core/lib/module/StateUtils.js"],"sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find((route) => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex((route) => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some((route) => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"],"mappings":"+qBAAA,MAAO,CAAAA,SAAP,yBAUA,GAAM,CAAAC,UAAU,CAAG,CAIjBC,GAAG,UAAAA,IAACC,KAAD,CAAQC,GAAR,CAAa,CACd,MAAO,CAAAD,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAmB,SAAAC,KAAD,QAAW,CAAAA,KAAK,CAACH,GAAN,GAAcA,GAA3C,KAAmD,IAA1D,CACD,CANgB,CAYjBI,OAAO,UAAAA,QAACL,KAAD,CAAQC,GAAR,CAAa,CAClB,MAAO,CAAAD,KAAK,CAACE,MAAN,CAAaI,SAAb,CAAwB,SAAAF,KAAD,QAAW,CAAAA,KAAK,CAACH,GAAN,GAAcA,GAAhD,GAAP,CACD,CAdgB,CAoBjBM,GAAG,UAAAA,IAACP,KAAD,CAAQC,GAAR,CAAa,CACd,MAAO,CAAC,CAACD,KAAK,CAACE,MAAN,CAAaM,IAAb,CAAmB,SAAAJ,KAAD,QAAW,CAAAA,KAAK,CAACH,GAAN,GAAcA,GAA3C,GAAT,CACD,CAtBgB,CA6BjBQ,IAAI,UAAAA,KAACT,KAAD,CAAQI,KAAR,CAAe,CACjBP,SAAS,CACPC,UAAU,CAACO,OAAX,CAAmBL,KAAnB,CAA0BI,KAAK,CAACH,GAAhC,IAAyC,CAAC,CADnC,CAEP,8CAFO,CAGPG,KAAK,CAACH,GAHC,CAAT,CAMA,GAAM,CAAAC,MAAM,CAAGF,KAAK,CAACE,MAAN,CAAaQ,KAAb,EAAf,CACAR,MAAM,CAACO,IAAP,CAAYL,KAAZ,EAEA,OAAAO,aAAA,CAAAA,aAAA,IACKX,KADE,MAELY,KAAK,CAAEV,MAAM,CAACW,MAAP,CAAgB,CAFlB,CAGLX,MAAA,CAAAA,MAAA,GAEH,CA5CgB,CAmDjBY,GAAG,UAAAA,IAACd,KAAD,CAAQ,CACT,GAAIA,KAAK,CAACY,KAAN,EAAe,CAAnB,CAAsB,CAEpB,MAAO,CAAAZ,KAAP,CACD,CACD,GAAM,CAAAE,MAAM,CAAGF,KAAK,CAACE,MAAN,CAAaQ,KAAb,CAAmB,CAAnB,CAAsB,CAAC,CAAvB,CAAf,CACA,OAAAC,aAAA,CAAAA,aAAA,IACKX,KADE,MAELY,KAAK,CAAEV,MAAM,CAACW,MAAP,CAAgB,CAFlB,CAGLX,MAAA,CAAAA,MAAA,GAEH,CA9DgB,CAmEjBa,WAAW,UAAAA,YAACf,KAAD,CAAQY,KAAR,CAAe,CACxB,GAAIA,KAAK,GAAKZ,KAAK,CAACY,KAApB,CAA2B,CACzB,MAAO,CAAAZ,KAAP,CACD,CAEDH,SAAS,CAAC,CAAC,CAACG,KAAK,CAACE,MAAN,CAAaU,KAAb,CAAH,CAAwB,6BAAxB,CAAuDA,KAAvD,CAAT,CAEA,OAAAD,aAAA,CAAAA,aAAA,IACKX,KADE,MAELY,KAAA,CAAAA,KAAA,GAEH,CA9EgB,CAmFjBI,MAAM,UAAAA,OAAChB,KAAD,CAAQC,GAAR,CAAa,CACjB,GAAM,CAAAW,KAAK,CAAGd,UAAU,CAACO,OAAX,CAAmBL,KAAnB,CAA0BC,GAA1B,CAAd,CACAJ,SAAS,CAACe,KAAK,GAAK,CAAC,CAAZ,CAAe,qCAAf,CAAsDX,GAAtD,CAAT,CACA,MAAO,CAAAH,UAAU,CAACiB,WAAX,CAAuBf,KAAvB,CAA8BY,KAA9B,CAAP,CACD,CAvFgB,CA4FjBK,IAAI,UAAAA,KAACjB,KAAD,CAAQ,CACV,GAAM,CAAAY,KAAK,CAAGZ,KAAK,CAACY,KAAN,CAAc,CAA5B,CACA,GAAM,CAAAR,KAAK,CAAGJ,KAAK,CAACE,MAAN,CAAaU,KAAb,CAAd,CACA,MAAO,CAAAR,KAAK,CAAGN,UAAU,CAACiB,WAAX,CAAuBf,KAAvB,CAA8BY,KAA9B,CAAH,CAA0CZ,KAAtD,CACD,CAhGgB,CAqGjBkB,OAAO,UAAAA,QAAClB,KAAD,CAAQ,CACb,GAAM,CAAAY,KAAK,CAAGZ,KAAK,CAACY,KAAN,CAAc,CAA5B,CACA,GAAM,CAAAR,KAAK,CAAGJ,KAAK,CAACE,MAAN,CAAaU,KAAb,CAAd,CACA,MAAO,CAAAR,KAAK,CAAGN,UAAU,CAACiB,WAAX,CAAuBf,KAAvB,CAA8BY,KAA9B,CAAH,CAA0CZ,KAAtD,CACD,CAzGgB,CAgHjBmB,eAAe,UAAAA,gBAACnB,KAAD,CAAQC,GAAR,CAAaG,KAAb,CAAoB,CACjC,GAAM,CAAAQ,KAAK,CAAGd,UAAU,CAACO,OAAX,CAAmBL,KAAnB,CAA0BC,GAA1B,CAAd,CACA,GAAM,CAAAmB,QAAQ,CAAGtB,UAAU,CAACuB,cAAX,CAA0BrB,KAA1B,CAAiCY,KAAjC,CAAwCR,KAAxC,CAAjB,CAEA,OAAAO,aAAA,CAAAA,aAAA,IACKS,QADE,MAELlB,MAAM,CAAEkB,QAAQ,CAAClB,MAAT,CAAgBQ,KAAhB,CAAsB,CAAtB,CAAyBE,KAAK,CAAG,CAAjC,IAEX,CAxHgB,CAiIjBU,SAAS,UAAAA,UAACtB,KAAD,CAAQC,GAAR,CAAaG,KAAb,CAA2C,IAAvB,CAAAmB,aAAa,CAAAC,SAAA,CAAAX,MAAA,IAAAW,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,KAApC,CACP,GAAM,CAAAZ,KAAK,CAAGd,UAAU,CAACO,OAAX,CAAmBL,KAAnB,CAA0BC,GAA1B,CAAd,CACA,GAAM,CAAAyB,SAAS,CAAGH,aAAa,CAAGvB,KAAK,CAACY,KAAT,CAAiBA,KAAhD,CACA,GAAI,CAAAe,SAAS,CAAG7B,UAAU,CAACuB,cAAX,CAA0BrB,KAA1B,CAAiCY,KAAjC,CAAwCR,KAAxC,CAAhB,CACAuB,SAAS,CAACf,KAAV,CAAkBc,SAAlB,CACA,MAAO,CAAAC,SAAP,CACD,CAvIgB,CA8IjBN,cAAc,UAAAA,eAACrB,KAAD,CAAQY,KAAR,CAAeR,KAAf,CAAsB,CAClCP,SAAS,CACP,CAAC,CAACG,KAAK,CAACE,MAAN,CAAaU,KAAb,CADK,CAEP,yCAFO,CAGPA,KAHO,CAIPR,KAAK,CAACH,GAJC,CAAT,CAOA,GAAID,KAAK,CAACE,MAAN,CAAaU,KAAb,IAAwBR,KAAxB,EAAiCQ,KAAK,GAAKZ,KAAK,CAACY,KAArD,CAA4D,CAC1D,MAAO,CAAAZ,KAAP,CACD,CAED,GAAM,CAAAE,MAAM,CAAGF,KAAK,CAACE,MAAN,CAAaQ,KAAb,EAAf,CACAR,MAAM,CAACU,KAAD,CAAN,CAAgBR,KAAhB,CAEA,OAAAO,aAAA,CAAAA,aAAA,IACKX,KADE,MAELY,KAFK,CAELA,KAFK,CAGLV,MAAA,CAAAA,MAAA,GAEH,CAlKgB,CAyKjB0B,KAAK,UAAAA,MAAC5B,KAAD,CAAQE,MAAR,CAAgBU,KAAhB,CAAuB,CAC1Bf,SAAS,CACPK,MAAM,CAACW,MAAP,EAAiBgB,KAAK,CAACC,OAAN,CAAc5B,MAAd,CADV,CAEP,2BAFO,CAAT,CAKA,GAAM,CAAAwB,SAAS,CAAGd,KAAK,GAAKa,SAAV,CAAsBvB,MAAM,CAACW,MAAP,CAAgB,CAAtC,CAA0CD,KAA5D,CAEA,GAAIZ,KAAK,CAACE,MAAN,CAAaW,MAAb,GAAwBX,MAAM,CAACW,MAA/B,EAAyCb,KAAK,CAACY,KAAN,GAAgBc,SAA7D,CAAwE,CACtE,GAAM,CAAAK,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAI3B,KAAD,CAAQ4B,EAAR,QAAe,CAAA9B,MAAM,CAAC8B,EAAD,CAAN,GAAe5B,KAA9C,GACA,GAAIJ,KAAK,CAACE,MAAN,CAAa+B,KAAb,CAAmBF,OAAnB,CAAJ,CAAiC,CAC/B,MAAO,CAAA/B,KAAP,CACD,CACF,CAEDH,SAAS,CAAC,CAAC,CAACK,MAAM,CAACwB,SAAD,CAAT,CAAsB,2BAAtB,CAAmDA,SAAnD,CAAT,CAEA,OAAAf,aAAA,CAAAA,aAAA,IACKX,KADE,MAELY,KAAK,CAAEc,SAFF,CAGLxB,MAAA,CAAAA,MAAA,GAEH,CA/LgB,CAAnB,CAkMA,cAAe,CAAAJ,UAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}