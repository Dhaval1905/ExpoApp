{"ast":null,"code":"var validateFormat=function validateFormat(){};if(process.env.NODE_ENV!=='production'){validateFormat=function validateFormat(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}function invariant(condition,format){for(var _len=arguments.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}validateFormat(format);if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');}else{var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;throw error;}}export default invariant;","map":{"version":3,"names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","_len","arguments","length","args","Array","_key","error","argIndex","replace","name","framesToPop"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-navigation/node_modules/@react-navigation/core/lib/module/utils/invariant.ts"],"sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nlet validateFormat: (format?: string) => void = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format?: string) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition: boolean, format?: string, ...args: any[]) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error: Error & { framesToPop?: number };\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nexport default invariant;\n"],"mappings":"AAWA,GAAI,CAAAA,cAAyC,CAAG,SAAAA,eAAA,CAAY,CAAE,CAA9D,CAEA,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzCH,cAAc,CAAG,SAAAA,eAAUI,MAAV,CAA2B,CAC1C,GAAIA,MAAM,GAAKC,SAAf,CAA0B,CACxB,KAAM,IAAI,CAAAC,KAAJ,CAAU,8CAAV,CAAN,CACD,CACF,CAJD,CAKD,CAED,QAAS,CAAAC,SAATA,CAAmBC,SAAnB,CAAuCJ,MAAvC,CAAwE,SAAAK,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAAbC,IAA3D,KAAAC,KAAA,CAAAJ,IAAA,GAAAA,IAAA,MAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAA2DF,IAA3D,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA,GACEd,cAAc,CAACI,MAAD,CAAd,CAEA,GAAI,CAACI,SAAL,CAAgB,CACd,GAAI,CAAAO,KAAJ,CACA,GAAIX,MAAM,GAAKC,SAAf,CAA0B,CACxBU,KAAK,CAAG,GAAI,CAAAT,KAAJ,CACN,+HADM,CAAR,CAGD,CAJD,IAIO,CACL,GAAI,CAAAU,QAAQ,CAAG,CAAf,CACAD,KAAK,CAAG,GAAI,CAAAT,KAAJ,CAAUF,MAAM,CAACa,OAAP,CAAe,KAAf,CAAsB,iBAAM,CAAAL,IAAI,CAACI,QAAQ,EAAT,CAAhC,GAAV,CAAR,CACAD,KAAK,CAACG,IAAN,CAAa,qBAAb,CACD,CAEDH,KAAK,CAACI,WAAN,CAAoB,CAApB,CACA,KAAM,CAAAJ,KAAN,CACD,CACF,CAED,cAAe,CAAAR,SAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}