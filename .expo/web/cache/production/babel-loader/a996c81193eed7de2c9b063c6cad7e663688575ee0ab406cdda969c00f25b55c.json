{"ast":null,"code":"export default function getEventManager(target){var listeners={};var removeListener=function removeListener(type,callback){var callbacks=listeners[type]?listeners[type][target]:undefined;if(!callbacks){return;}var index=callbacks.indexOf(callback);callbacks.splice(index,1);};var addListener=function addListener(type,callback){listeners[type]=listeners[type]||{};listeners[type][target]=listeners[type][target]||[];listeners[type][target].push(callback);return{remove:function remove(){return removeListener(type,callback);}};};return{addListener:addListener,emit:function emit(type,data){var items=listeners[type]||{};var callbacks=items[target]&&items[target].slice();callbacks===null||callbacks===void 0?void 0:callbacks.forEach(function(cb){return cb(data);});}};}","map":{"version":3,"names":["getEventManager","target","listeners","removeListener","type","callback","callbacks","undefined","index","indexOf","splice","addListener","push","remove","emit","data","items","slice","forEach","cb"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-navigation/node_modules/@react-navigation/core/lib/module/getEventManager.js"],"sourcesContent":["// @ts-check\n\n/**\n * @param {string} target\n */\nexport default function getEventManager(target) {\n  /**\n   * @type {Record<string, Record<string, ((e: any) => void)[]>>}\n   */\n  const listeners = {};\n\n  /**\n   * @param {string} type\n   * @param {() => void} callback\n   */\n  const removeListener = (type, callback) => {\n    const callbacks = listeners[type] ? listeners[type][target] : undefined;\n\n    if (!callbacks) {\n      return;\n    }\n\n    const index = callbacks.indexOf(callback);\n\n    callbacks.splice(index, 1);\n  };\n\n  /**\n   * @param {string} type\n   * @param {() => void} callback\n   */\n  const addListener = (type, callback) => {\n    listeners[type] = listeners[type] || {};\n    listeners[type][target] = listeners[type][target] || [];\n    listeners[type][target].push(callback);\n\n    return {\n      remove: () => removeListener(type, callback),\n    };\n  };\n\n  return {\n    addListener,\n\n    /**\n     * @param {string} type\n     * @param {any} [data]\n     */\n    emit: (type, data) => {\n      const items = listeners[type] || {};\n\n      /**\n       * Copy the current list of callbacks in case they are mutated during execution\n       * @type {((data: any) => void)[] | undefined}\n       */\n      const callbacks = items[target] && items[target].slice();\n\n      callbacks?.forEach((cb) => cb(data));\n    },\n  };\n}\n"],"mappings":"AAKA,cAAe,SAAS,CAAAA,eAATA,CAAyBC,MAAzB,CAAiC,CAI9C,GAAM,CAAAC,SAAS,CAAG,EAAlB,CAMA,GAAM,CAAAC,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIC,IAAD,CAAOC,QAAP,CAAoB,CACzC,GAAM,CAAAC,SAAS,CAAGJ,SAAS,CAACE,IAAD,CAAT,CAAkBF,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,CAAlB,CAA4CM,SAA9D,CAEA,GAAI,CAACD,SAAL,CAAgB,CACd,OACD,CAED,GAAM,CAAAE,KAAK,CAAGF,SAAS,CAACG,OAAV,CAAkBJ,QAAlB,CAAd,CAEAC,SAAS,CAACI,MAAV,CAAiBF,KAAjB,CAAwB,CAAxB,EACD,CAVD,CAgBA,GAAM,CAAAG,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIP,IAAD,CAAOC,QAAP,CAAoB,CACtCH,SAAS,CAACE,IAAD,CAAT,CAAkBF,SAAS,CAACE,IAAD,CAAT,EAAmB,EAArC,CACAF,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,EAA0BC,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,GAA2B,EAArD,CACAC,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,EAAwBW,IAAxB,CAA6BP,QAA7B,EAEA,MAAO,CACLQ,MAAM,CAAE,SAAAA,OAAA,QAAM,CAAAV,cAAc,CAACC,IAAD,CAAOC,QAAP,GADvB,CAAP,CAGD,CARD,CAUA,MAAO,CACLM,WADK,CACLA,WADK,CAOLG,IAAI,CAAE,SAAAA,KAACV,IAAD,CAAOW,IAAP,CAAgB,CACpB,GAAM,CAAAC,KAAK,CAAGd,SAAS,CAACE,IAAD,CAAT,EAAmB,EAAjC,CAMA,GAAM,CAAAE,SAAS,CAAGU,KAAK,CAACf,MAAD,CAAL,EAAiBe,KAAK,CAACf,MAAD,CAAL,CAAcgB,KAAd,EAAnC,CAEAX,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAEY,OAAX,CAAoB,SAAAC,EAAD,QAAQ,CAAAA,EAAE,CAACJ,IAAD,CAA7B,IACD,CAjBI,CAAP,CAmBD"},"metadata":{},"sourceType":"module","externalDependencies":[]}