{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";var _isAvailableAsync,_requestPermissionsAsync,_getPermissionsAsync,_presentPermissionsPickerAsync,_createAssetAsync,_saveToLibraryAsync,_addAssetsToAlbumAsync,_removeAssetsFromAlbumAsync,_deleteAssetsAsync,_getAssetInfoAsync,_getAlbumsAsync,_getAlbumAsync,_createAlbumAsync,_deleteAlbumsAsync,_getAssetsAsync,_getMomentsAsync,_migrateAlbumIfNeededAsync,_albumNeedsMigrationAsync;import{PermissionStatus,createPermissionHook,EventEmitter,UnavailabilityError}from'expo-modules-core';import Platform from\"react-native-web/dist/exports/Platform\";import MediaLibrary from\"./ExpoMediaLibrary\";var eventEmitter=new EventEmitter(MediaLibrary);export{PermissionStatus};function arrayize(item){if(Array.isArray(item)){return item;}return item?[item]:[];}function getId(ref){if(typeof ref==='string'){return ref;}return ref?ref.id:undefined;}function checkAssetIds(assetIds){if(assetIds.some(function(id){return!id||typeof id!=='string';})){throw new Error('Asset ID must be a string!');}}function checkAlbumIds(albumIds){if(albumIds.some(function(id){return!id||typeof id!=='string';})){throw new Error('Album ID must be a string!');}}function checkMediaType(mediaType){if(Object.values(MediaType).indexOf(mediaType)===-1){throw new Error(`Invalid mediaType: ${mediaType}`);}}function checkSortBy(sortBy){if(Array.isArray(sortBy)){checkSortByKey(sortBy[0]);if(typeof sortBy[1]!=='boolean'){throw new Error('Invalid sortBy array argument. Second item must be a boolean!');}}else{checkSortByKey(sortBy);}}function checkSortByKey(sortBy){if(Object.values(SortBy).indexOf(sortBy)===-1){throw new Error(`Invalid sortBy key: ${sortBy}`);}}function sortByOptionToString(sortBy){if(Array.isArray(sortBy)){return`${sortBy[0]} ${sortBy[1]?'ASC':'DESC'}`;}return`${sortBy} DESC`;}function dateToNumber(value){return value instanceof Date?value.getTime():value;}export var MediaType=MediaLibrary.MediaType;export var SortBy=MediaLibrary.SortBy;export function isAvailableAsync(){return(_isAvailableAsync=_isAvailableAsync||_asyncToGenerator(function*(){return!!MediaLibrary&&'getAssetsAsync'in MediaLibrary;})).apply(this,arguments);}export function requestPermissionsAsync(){return(_requestPermissionsAsync=_requestPermissionsAsync||_asyncToGenerator(function*(){var writeOnly=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!MediaLibrary.requestPermissionsAsync){throw new UnavailabilityError('MediaLibrary','requestPermissionsAsync');}return yield MediaLibrary.requestPermissionsAsync(writeOnly);})).apply(this,arguments);}export function getPermissionsAsync(){return(_getPermissionsAsync=_getPermissionsAsync||_asyncToGenerator(function*(){var writeOnly=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!MediaLibrary.getPermissionsAsync){throw new UnavailabilityError('MediaLibrary','getPermissionsAsync');}return yield MediaLibrary.getPermissionsAsync(writeOnly);})).apply(this,arguments);}export var usePermissions=createPermissionHook({getMethod:function getMethod(options){return getPermissionsAsync(options==null?void 0:options.writeOnly);},requestMethod:function requestMethod(options){return requestPermissionsAsync(options==null?void 0:options.writeOnly);}});export function presentPermissionsPickerAsync(){return(_presentPermissionsPickerAsync=_presentPermissionsPickerAsync||_asyncToGenerator(function*(){if(!MediaLibrary.presentPermissionsPickerAsync){throw new UnavailabilityError('MediaLibrary','presentPermissionsPickerAsync');}return yield MediaLibrary.presentPermissionsPickerAsync();})).apply(this,arguments);}export function createAssetAsync(_x){return(_createAssetAsync=_createAssetAsync||_asyncToGenerator(function*(localUri){if(!MediaLibrary.createAssetAsync){throw new UnavailabilityError('MediaLibrary','createAssetAsync');}if(!localUri||typeof localUri!=='string'){throw new Error('Invalid argument \"localUri\". It must be a string!');}var asset=yield MediaLibrary.createAssetAsync(localUri);if(Array.isArray(asset)){return asset[0];}return asset;})).apply(this,arguments);}export function saveToLibraryAsync(_x2){return(_saveToLibraryAsync=_saveToLibraryAsync||_asyncToGenerator(function*(localUri){if(!MediaLibrary.saveToLibraryAsync){throw new UnavailabilityError('MediaLibrary','saveToLibraryAsync');}return yield MediaLibrary.saveToLibraryAsync(localUri);})).apply(this,arguments);}export function addAssetsToAlbumAsync(_x3,_x4){return(_addAssetsToAlbumAsync=_addAssetsToAlbumAsync||_asyncToGenerator(function*(assets,album){var copy=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!MediaLibrary.addAssetsToAlbumAsync){throw new UnavailabilityError('MediaLibrary','addAssetsToAlbumAsync');}var assetIds=arrayize(assets).map(getId);var albumId=getId(album);checkAssetIds(assetIds);if(!albumId||typeof albumId!=='string'){throw new Error('Invalid album ID. It must be a string!');}if(Platform.OS==='ios'){return yield MediaLibrary.addAssetsToAlbumAsync(assetIds,albumId);}return yield MediaLibrary.addAssetsToAlbumAsync(assetIds,albumId,!!copy);})).apply(this,arguments);}export function removeAssetsFromAlbumAsync(_x5,_x6){return(_removeAssetsFromAlbumAsync=_removeAssetsFromAlbumAsync||_asyncToGenerator(function*(assets,album){if(!MediaLibrary.removeAssetsFromAlbumAsync){throw new UnavailabilityError('MediaLibrary','removeAssetsFromAlbumAsync');}var assetIds=arrayize(assets).map(getId);var albumId=getId(album);checkAssetIds(assetIds);return yield MediaLibrary.removeAssetsFromAlbumAsync(assetIds,albumId);})).apply(this,arguments);}export function deleteAssetsAsync(_x7){return(_deleteAssetsAsync=_deleteAssetsAsync||_asyncToGenerator(function*(assets){if(!MediaLibrary.deleteAssetsAsync){throw new UnavailabilityError('MediaLibrary','deleteAssetsAsync');}var assetIds=arrayize(assets).map(getId);checkAssetIds(assetIds);return yield MediaLibrary.deleteAssetsAsync(assetIds);})).apply(this,arguments);}export function getAssetInfoAsync(_x8){return(_getAssetInfoAsync=_getAssetInfoAsync||_asyncToGenerator(function*(asset){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{shouldDownloadFromNetwork:true};if(!MediaLibrary.getAssetInfoAsync){throw new UnavailabilityError('MediaLibrary','getAssetInfoAsync');}var assetId=getId(asset);checkAssetIds([assetId]);var assetInfo=yield MediaLibrary.getAssetInfoAsync(assetId,options);if(Array.isArray(assetInfo)){return assetInfo[0];}return assetInfo;})).apply(this,arguments);}export function getAlbumsAsync(){return(_getAlbumsAsync=_getAlbumsAsync||_asyncToGenerator(function*(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref$includeSmartAlbu=_ref.includeSmartAlbums,includeSmartAlbums=_ref$includeSmartAlbu===void 0?false:_ref$includeSmartAlbu;if(!MediaLibrary.getAlbumsAsync){throw new UnavailabilityError('MediaLibrary','getAlbumsAsync');}return yield MediaLibrary.getAlbumsAsync({includeSmartAlbums:includeSmartAlbums});})).apply(this,arguments);}export function getAlbumAsync(_x9){return(_getAlbumAsync=_getAlbumAsync||_asyncToGenerator(function*(title){if(!MediaLibrary.getAlbumAsync){throw new UnavailabilityError('MediaLibrary','getAlbumAsync');}if(typeof title!=='string'){throw new Error('Album title must be a string!');}return yield MediaLibrary.getAlbumAsync(title);})).apply(this,arguments);}export function createAlbumAsync(_x10,_x11){return(_createAlbumAsync=_createAlbumAsync||_asyncToGenerator(function*(albumName,asset){var copyAsset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!MediaLibrary.createAlbumAsync){throw new UnavailabilityError('MediaLibrary','createAlbumAsync');}var assetId=getId(asset);if(Platform.OS==='android'&&(typeof assetId!=='string'||assetId.length===0)){throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');}if(!albumName||typeof albumName!=='string'){throw new Error('Invalid argument \"albumName\". It must be a string!');}if(assetId!=null&&typeof assetId!=='string'){throw new Error('Asset ID must be a string!');}if(Platform.OS==='ios'){return yield MediaLibrary.createAlbumAsync(albumName,assetId);}return yield MediaLibrary.createAlbumAsync(albumName,assetId,!!copyAsset);})).apply(this,arguments);}export function deleteAlbumsAsync(_x12){return(_deleteAlbumsAsync=_deleteAlbumsAsync||_asyncToGenerator(function*(albums){var assetRemove=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!MediaLibrary.deleteAlbumsAsync){throw new UnavailabilityError('MediaLibrary','deleteAlbumsAsync');}var albumIds=arrayize(albums).map(getId);checkAlbumIds(albumIds);if(Platform.OS==='android'){return yield MediaLibrary.deleteAlbumsAsync(albumIds);}return yield MediaLibrary.deleteAlbumsAsync(albumIds,!!assetRemove);})).apply(this,arguments);}export function getAssetsAsync(){return(_getAssetsAsync=_getAssetsAsync||_asyncToGenerator(function*(){var assetsOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(!MediaLibrary.getAssetsAsync){throw new UnavailabilityError('MediaLibrary','getAssetsAsync');}var first=assetsOptions.first,after=assetsOptions.after,album=assetsOptions.album,sortBy=assetsOptions.sortBy,mediaType=assetsOptions.mediaType,createdAfter=assetsOptions.createdAfter,createdBefore=assetsOptions.createdBefore;var options={first:first==null?20:first,after:getId(after),album:getId(album),sortBy:arrayize(sortBy),mediaType:arrayize(mediaType||[MediaType.photo]),createdAfter:dateToNumber(createdAfter),createdBefore:dateToNumber(createdBefore)};if(first!=null&&typeof options.first!=='number'){throw new Error('Option \"first\" must be a number!');}if(after!=null&&typeof options.after!=='string'){throw new Error('Option \"after\" must be a string!');}if(album!=null&&typeof options.album!=='string'){throw new Error('Option \"album\" must be a string!');}if(after!=null&&Platform.OS==='android'&&isNaN(parseInt(getId(after),10))){throw new Error('Option \"after\" must be a valid ID!');}if(first!=null&&first<0){throw new Error('Option \"first\" must be a positive integer!');}options.sortBy.forEach(checkSortBy);options.mediaType.forEach(checkMediaType);options.sortBy=options.sortBy.map(sortByOptionToString);return yield MediaLibrary.getAssetsAsync(options);})).apply(this,arguments);}export function addListener(listener){return eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME,listener);}export function removeSubscription(subscription){subscription.remove();}export function removeAllListeners(){eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);}export function getMomentsAsync(){return(_getMomentsAsync=_getMomentsAsync||_asyncToGenerator(function*(){if(!MediaLibrary.getMomentsAsync){throw new UnavailabilityError('MediaLibrary','getMomentsAsync');}return yield MediaLibrary.getMomentsAsync();})).apply(this,arguments);}export function migrateAlbumIfNeededAsync(_x13){return(_migrateAlbumIfNeededAsync=_migrateAlbumIfNeededAsync||_asyncToGenerator(function*(album){if(!MediaLibrary.migrateAlbumIfNeededAsync){return;}return yield MediaLibrary.migrateAlbumIfNeededAsync(getId(album));})).apply(this,arguments);}export function albumNeedsMigrationAsync(_x14){return(_albumNeedsMigrationAsync=_albumNeedsMigrationAsync||_asyncToGenerator(function*(album){if(!MediaLibrary.albumNeedsMigrationAsync){return false;}return yield MediaLibrary.albumNeedsMigrationAsync(getId(album));})).apply(this,arguments);}","map":{"version":3,"names":["PermissionStatus","createPermissionHook","EventEmitter","UnavailabilityError","Platform","MediaLibrary","eventEmitter","arrayize","item","Array","isArray","getId","ref","id","undefined","checkAssetIds","assetIds","some","Error","checkAlbumIds","albumIds","checkMediaType","mediaType","Object","values","MediaType","indexOf","checkSortBy","sortBy","checkSortByKey","SortBy","sortByOptionToString","dateToNumber","value","Date","getTime","isAvailableAsync","_isAvailableAsync","_asyncToGenerator","apply","arguments","requestPermissionsAsync","_requestPermissionsAsync","writeOnly","length","getPermissionsAsync","_getPermissionsAsync","usePermissions","getMethod","options","requestMethod","presentPermissionsPickerAsync","_presentPermissionsPickerAsync","createAssetAsync","_x","_createAssetAsync","localUri","asset","saveToLibraryAsync","_x2","_saveToLibraryAsync","addAssetsToAlbumAsync","_x3","_x4","_addAssetsToAlbumAsync","assets","album","copy","map","albumId","OS","removeAssetsFromAlbumAsync","_x5","_x6","_removeAssetsFromAlbumAsync","deleteAssetsAsync","_x7","_deleteAssetsAsync","getAssetInfoAsync","_x8","_getAssetInfoAsync","shouldDownloadFromNetwork","assetId","assetInfo","getAlbumsAsync","_getAlbumsAsync","_ref","_ref$includeSmartAlbu","includeSmartAlbums","getAlbumAsync","_x9","_getAlbumAsync","title","createAlbumAsync","_x10","_x11","_createAlbumAsync","albumName","copyAsset","deleteAlbumsAsync","_x12","_deleteAlbumsAsync","albums","assetRemove","getAssetsAsync","_getAssetsAsync","assetsOptions","first","after","createdAfter","createdBefore","photo","isNaN","parseInt","forEach","addListener","listener","CHANGE_LISTENER_NAME","removeSubscription","subscription","remove","removeAllListeners","getMomentsAsync","_getMomentsAsync","migrateAlbumIfNeededAsync","_x13","_migrateAlbumIfNeededAsync","albumNeedsMigrationAsync","_x14","_albumNeedsMigrationAsync"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/expo-media-library/src/MediaLibrary.ts"],"sourcesContent":["import {\n  PermissionResponse as EXPermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport MediaLibrary from './ExpoMediaLibrary';\n\nconst eventEmitter = new EventEmitter(MediaLibrary);\n\n// @needsAudit\nexport type PermissionResponse = EXPermissionResponse & {\n  /**\n   * Indicates if your app has access to the whole or only part of the photo library. Possible values are:\n   * - `'all'` if the user granted your app access to the whole photo library\n   * - `'limited'` if the user granted your app access only to selected photos (only available on iOS 14.0+)\n   * - `'none'` if user denied or hasn't yet granted the permission\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\nexport type MediaTypeValue = 'audio' | 'photo' | 'video' | 'unknown';\nexport type SortByKey =\n  | 'default'\n  | 'mediaType'\n  | 'width'\n  | 'height'\n  | 'creationTime'\n  | 'modificationTime'\n  | 'duration';\nexport type SortByValue = [SortByKey, boolean] | SortByKey;\n\nexport type MediaTypeObject = {\n  audio: 'audio';\n  photo: 'photo';\n  video: 'video';\n  unknown: 'unknown';\n};\n\nexport type SortByObject = {\n  default: 'default';\n  mediaType: 'mediaType';\n  width: 'width';\n  height: 'height';\n  creationTime: 'creationTime';\n  modificationTime: 'modificationTime';\n  duration: 'duration';\n};\n\n// @needsAudit\nexport type Asset = {\n  /**\n   * Internal ID that represents an asset.\n   */\n  id: string;\n  /**\n   * Filename of the asset.\n   */\n  filename: string;\n  /**\n   * URI that points to the asset. `assets://*` (iOS), `file://*` (Android)\n   */\n  uri: string;\n  /**\n   * Media type.\n   */\n  mediaType: MediaTypeValue;\n  /**\n   * An array of media subtypes.\n   * @platform ios\n   */\n  mediaSubtypes?: MediaSubtype[];\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * File creation timestamp.\n   */\n  creationTime: number;\n  /**\n   * Last modification timestamp.\n   */\n  modificationTime: number;\n  /**\n   * Duration of the video or audio asset in seconds.\n   */\n  duration: number;\n  /**\n   * Album ID that the asset belongs to.\n   * @platform android\n   */\n  albumId?: string;\n};\n\n// @needsAudit\nexport type AssetInfo = Asset & {\n  /**\n   * Local URI for the asset.\n   */\n  localUri?: string;\n  /**\n   * GPS location if available.\n   */\n  location?: Location;\n  /**\n   * EXIF metadata associated with the image.\n   */\n  exif?: object;\n  /**\n   * Whether the asset is marked as favorite.\n   * @platform ios\n   */\n  isFavorite?: boolean;\n  /**\n   * This field is available only if flag `shouldDownloadFromNetwork` is set to `false`.\n   * Whether the asset is stored on the network (iCloud on iOS).\n   * @platform ios\n   */\n  isNetworkAsset?: boolean; //iOS only\n  /**\n   * Display orientation of the image. Orientation is available only for assets whose\n   * `mediaType` is `MediaType.photo`. Value will range from 1 to 8, see [EXIF orientation specification](http://sylvana.net/jpegcrop/exif_orientation.html)\n   * for more details.\n   * @platform ios\n   */\n  orientation?: number;\n};\n\n// @docsMissing\nexport type MediaSubtype =\n  | 'depthEffect'\n  | 'hdr'\n  | 'highFrameRate'\n  | 'livePhoto'\n  | 'panorama'\n  | 'screenshot'\n  | 'stream'\n  | 'timelapse';\n\n// @needsAudit\nexport type MediaLibraryAssetInfoQueryOptions = {\n  /**\n   * Whether allow the asset to be downloaded from network. Only available in iOS with iCloud assets.\n   * @default true\n   */\n  shouldDownloadFromNetwork?: boolean;\n};\n\n// @needsAudit\nexport type MediaLibraryAssetsChangeEvent = {\n  /**\n   * Whether the media library's changes could be described as \"incremental changes\".\n   * `true` indicates the changes are described by the `insertedAssets`, `deletedAssets` and\n   * `updatedAssets` values. `false` indicates that the scope of changes is too large and you\n   * should perform a full assets reload (eg. a user has changed access to individual assets in the\n   * media library).\n   */\n  hasIncrementalChanges: boolean;\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been inserted to the library.\n   */\n  insertedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been deleted from the library.\n   */\n  deletedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been updated or completed downloading from network\n   * storage (iCloud on iOS).\n   */\n  updatedAssets?: Asset[];\n};\n\n// @docsMissing\nexport type Location = {\n  latitude: number;\n  longitude: number;\n};\n\n// @needsAudit\nexport type Album = {\n  /**\n   * Album ID.\n   */\n  id: string;\n  /**\n   * Album title.\n   */\n  title: string;\n  /**\n   * Estimated number of assets in the album.\n   */\n  assetCount: number;\n  /**\n   * The type of the assets album.\n   * @platform ios\n   */\n  type?: AlbumType;\n  /**\n   * Apply only to albums whose type is `'moment'`. Earliest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  startTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Latest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  endTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Approximated location of all\n   * assets in the moment.\n   * @platform ios\n   */\n  approximateLocation?: Location;\n  /**\n   * Apply only to albums whose type is `'moment'`. Names of locations grouped\n   * in the moment.\n   * @platform ios\n   */\n  locationNames?: string[];\n};\n\n// @docsMissing\nexport type AlbumType = 'album' | 'moment' | 'smartAlbum';\n\n// @docsMissing\nexport type AlbumsOptions = {\n  includeSmartAlbums?: boolean;\n};\n\n// @needsAudit\nexport type AssetsOptions = {\n  /**\n   * The maximum number of items on a single page.\n   * @default 20\n   */\n  first?: number;\n  /**\n   * Asset ID of the last item returned on the previous page. To get the ID of the next page,\n   * pass [`endCursor`](#pagedinfo) as its value.\n   */\n  after?: AssetRef;\n  /**\n   * [Album](#album) or its ID to get assets from specific album.\n   */\n  album?: AlbumRef;\n  /**\n   * An array of [`SortByValue`](#sortbyvalue)s or a single `SortByValue` value. By default, all\n   * keys are sorted in descending order, however you can also pass a pair `[key, ascending]` where\n   * the second item is a `boolean` value that means whether to use ascending order. Note that if\n   * the `SortBy.default` key is used, then `ascending` argument will not matter. Earlier items have\n   * higher priority when sorting out the results.\n   * If empty, this method will use the default sorting that is provided by the platform.\n   */\n  sortBy?: SortByValue[] | SortByValue;\n  /**\n   * An array of [MediaTypeValue](#expomedialibrarymediatypevalue)s or a single `MediaTypeValue`.\n   * @default MediaType.photo\n   */\n  mediaType?: MediaTypeValue[] | MediaTypeValue;\n  /**\n   * `Date` object or Unix timestamp in milliseconds limiting returned assets only to those that\n   * were created after this date.\n   */\n  createdAfter?: Date | number;\n  /**\n   * Similarly as `createdAfter`, but limits assets only to those that were created before specified\n   * date.\n   */\n  createdBefore?: Date | number;\n};\n\n// @needsAudit\nexport type PagedInfo<T> = {\n  /**\n   * A page of [`Asset`](#asset)s fetched by the query.\n   */\n  assets: T[];\n  /**\n   * ID of the last fetched asset. It should be passed as `after` option in order to get the\n   * next page.\n   */\n  endCursor: string;\n  /**\n   * Whether there are more assets to fetch.\n   */\n  hasNextPage: boolean;\n  /**\n   * Estimated total number of assets that match the query.\n   */\n  totalCount: number;\n};\n\n// @docsMissing\nexport type AssetRef = Asset | string;\n\n// @docsMissing\nexport type AlbumRef = Album | string;\n\nexport {\n  PermissionStatus,\n  PermissionExpiration,\n  EXPermissionResponse,\n  PermissionHookOptions,\n  Subscription,\n};\n\nfunction arrayize(item: any): any[] {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\n\nfunction getId(ref: any): string | undefined {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds: any): void {\n  if (assetIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds: any): void {\n  if (albumIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType: any): void {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\n\nfunction checkSortBy(sortBy: any): void {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy: any): void {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\n\nfunction sortByOptionToString(sortBy: any) {\n  if (Array.isArray(sortBy)) {\n    return `${sortBy[0]} ${sortBy[1] ? 'ASC' : 'DESC'}`;\n  }\n  return `${sortBy} DESC`;\n}\n\nfunction dateToNumber(value?: Date | number): number | undefined {\n  return value instanceof Date ? value.getTime() : value;\n}\n\n// @needsAudit\n/**\n * Possible media types.\n */\nexport const MediaType: MediaTypeObject = MediaLibrary.MediaType;\n\n// @needsAudit\n/**\n * Supported keys that can be used to sort `getAssetsAsync` results.\n */\nexport const SortBy: SortByObject = MediaLibrary.SortBy;\n\n// @needsAudit\n/**\n * Returns whether the Media Library API is enabled on the current device.\n * @return A promise which fulfils with a `boolean`, indicating whether the Media Library API is\n * available on the current device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!MediaLibrary && 'getAssetsAsync' in MediaLibrary;\n}\n\n// @needsAudit @docsMissing\n/**\n * Asks the user to grant permissions for accessing media in user's media library.\n * @param writeOnly\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function requestPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<PermissionResponse> {\n  if (!MediaLibrary.requestPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'requestPermissionsAsync');\n  }\n  return await MediaLibrary.requestPermissionsAsync(writeOnly);\n}\n\n// @needsAudit @docsMissing\n/**\n * Checks user's permissions for accessing media library.\n * @param writeOnly\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function getPermissionsAsync(writeOnly: boolean = false): Promise<PermissionResponse> {\n  if (!MediaLibrary.getPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getPermissionsAsync');\n  }\n  return await MediaLibrary.getPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<PermissionResponse, { writeOnly?: boolean }>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * __Available only on iOS >= 14.__ Allows the user to update the assets that your app has access to.\n * The system modal is only displayed if the user originally allowed only `limited` access to their\n * media library, otherwise this method is a no-op.\n * @return A promise that either rejects if the method is unavailable (meaning the device is not\n * running iOS >= 14), or resolves to `void`.\n * > __Note:__ This method doesn't inform you if the user changes which assets your app has access to.\n * For that information, you need to subscribe for updates to the user's media library using [addListener(listener)](#medialibraryaddlistenerlistener).\n * If `hasIncrementalChanges` is `false`, the user changed their permissions.\n */\nexport async function presentPermissionsPickerAsync(): Promise<void> {\n  if (!MediaLibrary.presentPermissionsPickerAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync');\n  }\n  return await MediaLibrary.presentPermissionsPickerAsync();\n}\n\n// @needsAudit\n/**\n * Creates an asset from existing file. The most common use case is to save a picture taken by [Camera](./camera).\n * This method requires `CAMERA_ROLL` permission.\n *\n * @example\n * ```js\n * const { uri } = await Camera.takePictureAsync();\n * const asset = await MediaLibrary.createAssetAsync(uri);\n * ```\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`\n * @return A promise which fulfils with an object representing an [`Asset`](#asset).\n */\nexport async function createAssetAsync(localUri: string): Promise<Asset> {\n  if (!MediaLibrary.createAssetAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n  }\n\n  if (!localUri || typeof localUri !== 'string') {\n    throw new Error('Invalid argument \"localUri\". It must be a string!');\n  }\n  const asset = await MediaLibrary.createAssetAsync(localUri);\n\n  if (Array.isArray(asset)) {\n    // Android returns an array with asset, we need to pick the first item\n    return asset[0];\n  }\n  return asset;\n}\n\n// @needsAudit\n/**\n * Saves the file at given `localUri` to the user's media library. Unlike [`createAssetAsync()`](#medialibrarycreateassetasynclocaluri),\n * This method doesn't return created asset.\n * On __iOS 11+__, it's possible to use this method without asking for `CAMERA_ROLL` permission,\n * however then yours `Info.plist` should have `NSPhotoLibraryAddUsageDescription` key.\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`.\n */\nexport async function saveToLibraryAsync(localUri: string): Promise<void> {\n  if (!MediaLibrary.saveToLibraryAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'saveToLibraryAsync');\n  }\n  return await MediaLibrary.saveToLibraryAsync(localUri);\n}\n\n// @needsAudit\n/**\n * Adds array of assets to the album.\n *\n * On Android, by default it copies assets from the current album to provided one, however it's also\n * possible to move them by passing `false` as `copyAssets` argument.In case they're copied you\n * should keep in mind that `getAssetsAsync` will return duplicated assets.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @param copy __Android only.__ Whether to copy assets to the new album instead of move them.\n * Defaults to `true`.\n * @return Returns promise which fulfils with `true` if the assets were successfully added to\n * the album.\n */\nexport async function addAssetsToAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef,\n  copy: boolean = true\n): Promise<boolean> {\n  if (!MediaLibrary.addAssetsToAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n\n  if (!albumId || typeof albumId !== 'string') {\n    throw new Error('Invalid album ID. It must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n  }\n  return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n}\n\n// @needsAudit\n/**\n * Removes given assets from album.\n *\n * On Android, album will be automatically deleted if there are no more assets inside.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @return Returns promise which fulfils with `true` if the assets were successfully removed from\n * the album.\n */\nexport async function removeAssetsFromAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef\n): Promise<boolean> {\n  if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n}\n\n// @needsAudit\n/**\n * Deletes assets from the library. On iOS it deletes assets from all albums they belong to, while\n * on Android it keeps all copies of them (album is strictly connected to the asset). Also, there is\n * additional dialog on iOS that requires user to confirm this action.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @return Returns promise which fulfils with `true` if the assets were successfully deleted.\n */\nexport async function deleteAssetsAsync(assets: AssetRef[] | AssetRef): Promise<boolean> {\n  if (!MediaLibrary.deleteAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.deleteAssetsAsync(assetIds);\n}\n\n// @needsAudit\n/**\n * Provides more information about an asset, including GPS location, local URI and EXIF metadata.\n * @param asset An [Asset](#asset) or its ID.\n * @param options\n * @return An [AssetInfo](#assetinfo) object, which is an `Asset` extended by an additional fields.\n */\nexport async function getAssetInfoAsync(\n  asset: AssetRef,\n  options: MediaLibraryAssetInfoQueryOptions = { shouldDownloadFromNetwork: true }\n): Promise<AssetInfo> {\n  if (!MediaLibrary.getAssetInfoAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n  }\n\n  const assetId = getId(asset);\n\n  checkAssetIds([assetId]);\n\n  const assetInfo = await MediaLibrary.getAssetInfoAsync(assetId, options);\n\n  if (Array.isArray(assetInfo)) {\n    // Android returns an array with asset info, we need to pick the first item\n    return assetInfo[0];\n  }\n  return assetInfo;\n}\n\n// @needsAudit\n/**\n * Queries for user-created albums in media gallery.\n * @return A promise which fulfils with an array of [`Album`](#asset)s. Depending on Android version,\n * root directory of your storage may be listed as album titled `\"0\"` or unlisted at all.\n */\nexport async function getAlbumsAsync({ includeSmartAlbums = false }: AlbumsOptions = {}): Promise<\n  Album[]\n> {\n  if (!MediaLibrary.getAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n  }\n  return await MediaLibrary.getAlbumsAsync({ includeSmartAlbums });\n}\n\n// @needsAudit\n/**\n * Queries for an album with a specific name.\n * @param title Name of the album to look for.\n * @return An object representing an [`Album`](#album), if album with given name exists, otherwise\n * returns `null`.\n */\nexport async function getAlbumAsync(title: string): Promise<Album> {\n  if (!MediaLibrary.getAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n  }\n  if (typeof title !== 'string') {\n    throw new Error('Album title must be a string!');\n  }\n  return await MediaLibrary.getAlbumAsync(title);\n}\n\n// @needsAudit\n/**\n * Creates an album with given name and initial asset. The asset parameter is required on Android,\n * since it's not possible to create empty album on this platform. On Android, by default it copies\n * given asset from the current album to the new one, however it's also possible to move it by\n * passing `false` as `copyAsset` argument.\n * In case it's copied you should keep in mind that `getAssetsAsync` will return duplicated asset.\n * @param albumName Name of the album to create.\n * @param asset An [Asset](#asset) or its ID (required on Android).\n * @param copyAsset __Android Only.__ Whether to copy asset to the new album instead of move it.\n * Defaults to `true`.\n * @return Newly created [`Album`](#album).\n */\nexport async function createAlbumAsync(\n  albumName: string,\n  asset?: AssetRef,\n  copyAsset: boolean = true\n): Promise<Album> {\n  if (!MediaLibrary.createAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n  }\n\n  const assetId = getId(asset);\n\n  if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n    // it's not possible to create empty album on Android, so initial asset must be provided\n    throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n  }\n  if (!albumName || typeof albumName !== 'string') {\n    throw new Error('Invalid argument \"albumName\". It must be a string!');\n  }\n  if (assetId != null && typeof assetId !== 'string') {\n    throw new Error('Asset ID must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.createAlbumAsync(albumName, assetId);\n  }\n  return await MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n}\n\n// @needsAudit\n/**\n * Deletes given albums from the library. On Android by default it deletes assets belonging to given\n * albums from the library. On iOS it doesn't delete these assets, however it's possible to do by\n * passing `true` as `deleteAssets`.\n * @param albums An array of [`Album`](#asset)s or their IDs.\n * @param assetRemove __iOS Only.__ Whether to also delete assets belonging to given albums.\n * Defaults to `false`.\n * @return Returns a promise which fulfils with `true` if the albums were successfully deleted from\n * the library.\n */\nexport async function deleteAlbumsAsync(\n  albums: AlbumRef[] | AlbumRef,\n  assetRemove: boolean = false\n): Promise<boolean> {\n  if (!MediaLibrary.deleteAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n  }\n\n  const albumIds = arrayize(albums).map(getId);\n\n  checkAlbumIds(albumIds);\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.deleteAlbumsAsync(albumIds);\n  }\n  return await MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n}\n\n// @needsAudit\n/**\n * Fetches a page of assets matching the provided criteria.\n * @param assetsOptions\n * @return A promise that fulfils with to [`PagedInfo`](#pagedinfo) object with array of [`Asset`](#asset)s.\n */\nexport async function getAssetsAsync(assetsOptions: AssetsOptions = {}): Promise<PagedInfo<Asset>> {\n  if (!MediaLibrary.getAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n  }\n\n  const { first, after, album, sortBy, mediaType, createdAfter, createdBefore } = assetsOptions;\n\n  const options = {\n    first: first == null ? 20 : first,\n    after: getId(after),\n    album: getId(album),\n    sortBy: arrayize(sortBy),\n    mediaType: arrayize(mediaType || [MediaType.photo]),\n    createdAfter: dateToNumber(createdAfter),\n    createdBefore: dateToNumber(createdBefore),\n  };\n\n  if (first != null && typeof options.first !== 'number') {\n    throw new Error('Option \"first\" must be a number!');\n  }\n  if (after != null && typeof options.after !== 'string') {\n    throw new Error('Option \"after\" must be a string!');\n  }\n  if (album != null && typeof options.album !== 'string') {\n    throw new Error('Option \"album\" must be a string!');\n  }\n\n  if (after != null && Platform.OS === 'android' && isNaN(parseInt(getId(after) as string, 10))) {\n    throw new Error('Option \"after\" must be a valid ID!');\n  }\n\n  if (first != null && first < 0) {\n    throw new Error('Option \"first\" must be a positive integer!');\n  }\n\n  options.sortBy.forEach(checkSortBy);\n  options.mediaType.forEach(checkMediaType);\n  options.sortBy = options.sortBy.map(sortByOptionToString);\n\n  return await MediaLibrary.getAssetsAsync(options);\n}\n\n// @needsAudit\n/**\n * Subscribes for updates in user's media library.\n * @param listener A callback that is fired when any assets have been inserted or deleted from the\n * library, or when the user changes which assets they're allowing access to. On Android it's\n * invoked with an empty object. On iOS it's invoked with [`MediaLibraryAssetsChangeEvent`](#medialibraryassetschangeevent)\n * object.\n * @return An [`Subscription`](#subscription) object that you can call `remove()` on when you would\n * like to unsubscribe the listener.\n */\nexport function addListener(\n  listener: (event: MediaLibraryAssetsChangeEvent) => void\n): Subscription {\n  return eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n}\n\n// @docsMissing\nexport function removeSubscription(subscription: Subscription): void {\n  subscription.remove();\n}\n\n// @needsAudit\n/**\n * Removes all listeners.\n */\nexport function removeAllListeners(): void {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\n\n// @needsAudit\n/**\n * Fetches a list of moments, which is a group of assets taken around the same place\n * and time.\n * @return An array of [albums](#album) whose type is `moment`.\n * @platform ios\n */\nexport async function getMomentsAsync() {\n  if (!MediaLibrary.getMomentsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n  }\n\n  return await MediaLibrary.getMomentsAsync();\n}\n\n// @needsAudit\n/**\n * Moves album content to the special media directories on **Android R** or **above** if needed.\n * Those new locations are in line with the Android `scoped storage` - so your application won't\n * lose write permission to those directories in the future.\n *\n * This method does nothing if:\n * - app is running on **iOS**, **web** or **Android below R**\n * - app has **write permission** to the album folder\n *\n * The migration is possible when the album contains only compatible files types.\n * For instance, movies and pictures are compatible with each other, but music and pictures are not.\n * If automatic migration isn't possible, the function will be rejected.\n * In that case, you can use methods from the `expo-file-system` to migrate all your files manually.\n *\n * # Why do you need to migrate files?\n * __Android R__ introduced a lot of changes in the storage system. Now applications can't save\n * anything to the root directory. The only available locations are from the `MediaStore` API.\n * Unfortunately, the media library stored albums in folders for which, because of those changes,\n * the application doesn't have permissions anymore. However, it doesn't mean you need to migrate\n * all your albums. If your application doesn't add assets to albums, you don't have to migrate.\n * Everything will work as it used to. You can read more about scoped storage in [the Android documentation](https://developer.android.com/about/versions/11/privacy/storage).\n *\n * @param album An [Album](#album) or its ID.\n * @return A promise which fulfils to `void`.\n */\nexport async function migrateAlbumIfNeededAsync(album: AlbumRef): Promise<void> {\n  if (!MediaLibrary.migrateAlbumIfNeededAsync) {\n    return;\n  }\n\n  return await MediaLibrary.migrateAlbumIfNeededAsync(getId(album));\n}\n\n// @needsAudit\n/**\n * Checks if the album should be migrated to a different location. In other words, it checks if the\n * application has the write permission to the album folder. If not, it returns `true`, otherwise `false`.\n * > Note: For **Android below R**, **web** or **iOS**, this function always returns `false`.\n * @param album An [Album](#album) or its ID.\n * @return Returns a promise which fulfils with `true` if the album should be migrated.\n */\nexport async function albumNeedsMigrationAsync(album: AlbumRef): Promise<boolean> {\n  if (!MediaLibrary.albumNeedsMigrationAsync) {\n    return false;\n  }\n\n  return await MediaLibrary.albumNeedsMigrationAsync(getId(album));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}