{"ast":null,"code":"import _createClass from\"@babel/runtime/helpers/createClass\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";export function throwIfInvalidProps(props){checks.forEach(function(check){return check.validate(props);});}var PropCheck=_createClass(function PropCheck(isInvalid,errorText){var _this=this;_classCallCheck(this,PropCheck);this.validate=function(props){if(_this.isInvalid(props)){throw new Error(`${_this.errorText} Check usage of react-native-date-picker.`);}};this.isInvalid=isInvalid;this.errorText=errorText;});var dateCheck=new PropCheck(function(props){return props&&!(props.date instanceof Date);},'Invalid or missing Date prop. Must be a Date object.');var widthCheck=new PropCheck(function(props){return props&&props.style&&props.style.width&&typeof props.style.width!=='number';},'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.');var heightCheck=new PropCheck(function(props){return props&&props.style&&props.style.height&&typeof props.style.height!=='number';},'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.');var modeCheck=new PropCheck(function(props){return props&&props.mode&&!['datetime','date','time'].includes(props.mode);},\"Invalid mode. Valid modes: 'datetime', 'date', 'time'\");var androidVariantCheck=new PropCheck(function(props){return props&&props.androidVariant&&!['nativeAndroid','iosClone'].includes(props.androidVariant);},\"Invalid android variant. Valid modes: 'nativeAndroid', 'iosClone'\");var themeCheck=new PropCheck(function(props){return props&&props.theme&&!['light','dark','auto'].includes(props.theme);},\"Invalid theme. Valid options: 'light', 'dark', 'auto'\");var checks=[dateCheck,widthCheck,heightCheck,modeCheck,androidVariantCheck,themeCheck];","map":{"version":3,"names":["throwIfInvalidProps","props","checks","forEach","check","validate","PropCheck","_createClass","isInvalid","errorText","_this","_classCallCheck","Error","dateCheck","date","Date","widthCheck","style","width","heightCheck","height","modeCheck","mode","includes","androidVariantCheck","androidVariant","themeCheck","theme"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-native-date-picker/src/propChecker.js"],"sourcesContent":["export function throwIfInvalidProps(props) {\n  checks.forEach((check) => check.validate(props))\n}\n\nclass PropCheck {\n  constructor(isInvalid, errorText) {\n    this.isInvalid = isInvalid\n    this.errorText = errorText\n  }\n  validate = (props) => {\n    if (this.isInvalid(props)) {\n      throw new Error(\n        `${this.errorText} Check usage of react-native-date-picker.`\n      )\n    }\n  }\n}\n\nconst dateCheck = new PropCheck(\n  (props) => props && !(props.date instanceof Date),\n  'Invalid or missing Date prop. Must be a Date object.'\n)\n\nconst widthCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.style &&\n    props.style.width &&\n    typeof props.style.width !== 'number',\n  'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.'\n)\n\nconst heightCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.style &&\n    props.style.height &&\n    typeof props.style.height !== 'number',\n  'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.'\n)\n\nconst modeCheck = new PropCheck(\n  (props) =>\n    props && props.mode && !['datetime', 'date', 'time'].includes(props.mode),\n  \"Invalid mode. Valid modes: 'datetime', 'date', 'time'\"\n)\n\nconst androidVariantCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.androidVariant &&\n    !['nativeAndroid', 'iosClone'].includes(props.androidVariant),\n  \"Invalid android variant. Valid modes: 'nativeAndroid', 'iosClone'\"\n)\n\nconst themeCheck = new PropCheck(\n  (props) =>\n    props && props.theme && !['light', 'dark', 'auto'].includes(props.theme),\n  \"Invalid theme. Valid options: 'light', 'dark', 'auto'\"\n)\n\nconst checks = [\n  dateCheck,\n  widthCheck,\n  heightCheck,\n  modeCheck,\n  androidVariantCheck,\n  themeCheck,\n]\n"],"mappings":"gIAAA,MAAO,SAAS,CAAAA,mBAAmBA,CAACC,KAAK,CAAE,CACzCC,MAAM,CAACC,OAAO,CAAC,SAACC,KAAK,QAAK,CAAAA,KAAK,CAACC,QAAQ,CAACJ,KAAK,CAAC,GAAC,CAClD,CAAC,GAEK,CAAAK,SAAS,CAAAC,YAAA,CACb,SAAAD,UAAYE,SAAS,CAAEC,SAAS,CAAE,KAAAC,KAAA,MAAAC,eAAA,MAAAL,SAAA,OAIlCD,QAAQ,CAAG,SAACJ,KAAK,CAAK,CACpB,GAAIS,KAAI,CAACF,SAAS,CAACP,KAAK,CAAC,CAAE,CACzB,KAAM,IAAI,CAAAW,KAAK,CACZ,GAAEF,KAAI,CAACD,SAAU,2CACpB,CAAC,CACH,CACF,CAAC,CATC,IAAI,CAACD,SAAS,CAAGA,SAAS,CAC1B,IAAI,CAACC,SAAS,CAAGA,SAAS,CAC5B,CAAC,EAUH,GAAM,CAAAI,SAAS,CAAG,GAAI,CAAAP,SAAS,CAC7B,SAACL,KAAK,QAAK,CAAAA,KAAK,EAAI,EAAEA,KAAK,CAACa,IAAI,WAAY,CAAAC,IAAI,CAAC,GACjD,sDACF,CAAC,CAED,GAAM,CAAAC,UAAU,CAAG,GAAI,CAAAV,SAAS,CAC9B,SAACL,KAAK,QACJ,CAAAA,KAAK,EACLA,KAAK,CAACgB,KAAK,EACXhB,KAAK,CAACgB,KAAK,CAACC,KAAK,EACjB,MAAO,CAAAjB,KAAK,CAACgB,KAAK,CAACC,KAAK,GAAK,QAAQ,GACvC,kGACF,CAAC,CAED,GAAM,CAAAC,WAAW,CAAG,GAAI,CAAAb,SAAS,CAC/B,SAACL,KAAK,QACJ,CAAAA,KAAK,EACLA,KAAK,CAACgB,KAAK,EACXhB,KAAK,CAACgB,KAAK,CAACG,MAAM,EAClB,MAAO,CAAAnB,KAAK,CAACgB,KAAK,CAACG,MAAM,GAAK,QAAQ,GACxC,oGACF,CAAC,CAED,GAAM,CAAAC,SAAS,CAAG,GAAI,CAAAf,SAAS,CAC7B,SAACL,KAAK,QACJ,CAAAA,KAAK,EAAIA,KAAK,CAACqB,IAAI,EAAI,CAAC,CAAC,UAAU,CAAE,MAAM,CAAE,MAAM,CAAC,CAACC,QAAQ,CAACtB,KAAK,CAACqB,IAAI,CAAC,GAC3E,uDACF,CAAC,CAED,GAAM,CAAAE,mBAAmB,CAAG,GAAI,CAAAlB,SAAS,CACvC,SAACL,KAAK,QACJ,CAAAA,KAAK,EACLA,KAAK,CAACwB,cAAc,EACpB,CAAC,CAAC,eAAe,CAAE,UAAU,CAAC,CAACF,QAAQ,CAACtB,KAAK,CAACwB,cAAc,CAAC,GAC/D,mEACF,CAAC,CAED,GAAM,CAAAC,UAAU,CAAG,GAAI,CAAApB,SAAS,CAC9B,SAACL,KAAK,QACJ,CAAAA,KAAK,EAAIA,KAAK,CAAC0B,KAAK,EAAI,CAAC,CAAC,OAAO,CAAE,MAAM,CAAE,MAAM,CAAC,CAACJ,QAAQ,CAACtB,KAAK,CAAC0B,KAAK,CAAC,GAC1E,uDACF,CAAC,CAED,GAAM,CAAAzB,MAAM,CAAG,CACbW,SAAS,CACTG,UAAU,CACVG,WAAW,CACXE,SAAS,CACTG,mBAAmB,CACnBE,UAAU,CACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}