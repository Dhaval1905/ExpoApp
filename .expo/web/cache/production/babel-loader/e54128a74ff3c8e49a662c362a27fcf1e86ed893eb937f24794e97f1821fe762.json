{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import*as NavigationActions from\"../NavigationActions\";import*as StackActions from\"./StackActions\";import createConfigGetter from\"./createConfigGetter\";import getScreenForRouteName from\"./getScreenForRouteName\";import StateUtils from\"../StateUtils\";import validateRouteConfigMap from\"./validateRouteConfigMap\";import invariant from\"../utils/invariant\";import{generateKey}from\"./KeyGenerator\";import{createPathParser}from\"./pathUtils\";function behavesLikePushAction(action){return action.type===NavigationActions.NAVIGATE||action.type===StackActions.PUSH;}var defaultActionCreators=function defaultActionCreators(){return{};};function isResetToRootStack(action){return action.type===StackActions.RESET&&action.key===null;}export default(function(routeConfigs){var stackConfig=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};validateRouteConfigMap(routeConfigs);var childRouters={};var routeNames=Object.keys(routeConfigs);routeNames.forEach(function(routeName){var routeConfig=routeConfigs[routeName];var screen=routeConfig&&routeConfig.screen?routeConfig.screen:routeConfig;if(screen&&screen.router){childRouters[routeName]=screen.router;}else{childRouters[routeName]=null;}});var initialRouteParams=stackConfig.initialRouteParams;var getCustomActionCreators=stackConfig.getCustomActionCreators||defaultActionCreators;var initialRouteName=stackConfig.initialRouteName||routeNames[0];var initialChildRouter=childRouters[initialRouteName];function getInitialState(action){var route={};var childRouter=childRouters[action.routeName];if(behavesLikePushAction(action)&&childRouter!==undefined){var childState={};if(childRouter!==null){var childAction=action.action||NavigationActions.init({params:action.params});childState=childRouter.getStateForAction(childAction);}return{key:'StackRouterRoot',isTransitioning:false,index:0,routes:[_objectSpread(_objectSpread({params:action.params},childState),{},{key:action.key||generateKey(),routeName:action.routeName})]};}if(initialChildRouter){route=initialChildRouter.getStateForAction(NavigationActions.navigate({routeName:initialRouteName,params:initialRouteParams}));}var params=(routeConfigs[initialRouteName].params||route.params||action.params||initialRouteParams)&&_objectSpread(_objectSpread(_objectSpread(_objectSpread({},routeConfigs[initialRouteName].params||{}),route.params||{}),action.params||{}),initialRouteParams||{});var initialRouteKey=stackConfig.initialRouteKey;route=_objectSpread(_objectSpread(_objectSpread({},route),params?{params:params}:{}),{},{routeName:initialRouteName,key:action.key||initialRouteKey||generateKey()});return{key:'StackRouterRoot',isTransitioning:false,index:0,routes:[route]};}function getParamsForRouteAndAction(routeName,action){var routeConfig=routeConfigs[routeName];if(routeConfig&&routeConfig.params){return _objectSpread(_objectSpread({},routeConfig.params),action.params);}else{return action.params;}}var _createPathParser=createPathParser(childRouters,routeConfigs,stackConfig),getPathAndParamsForRoute=_createPathParser.getPathAndParamsForRoute,_getActionForPathAndParams=_createPathParser.getActionForPathAndParams;return{childRouters:childRouters,getComponentForState:function getComponentForState(state){var activeChildRoute=state.routes[state.index];var routeName=activeChildRoute.routeName;if(childRouters[routeName]){return childRouters[routeName].getComponentForState(activeChildRoute);}return getScreenForRouteName(routeConfigs,routeName);},getComponentForRouteName:function getComponentForRouteName(routeName){return getScreenForRouteName(routeConfigs,routeName);},getActionCreators:function getActionCreators(route,navStateKey){return _objectSpread(_objectSpread({},getCustomActionCreators(route,navStateKey)),{},{pop:function pop(n,params){return StackActions.pop(_objectSpread({n:n},params));},popToTop:function popToTop(params){return StackActions.popToTop(params);},push:function push(routeName,params,action){return StackActions.push({routeName:routeName,params:params,action:action});},replace:function replace(replaceWith,params,action,newKey){if(typeof replaceWith==='string'){return StackActions.replace({routeName:replaceWith,params:params,action:action,key:route.key,newKey:newKey});}invariant(typeof replaceWith==='object','Must replaceWith an object or a string');invariant(params==null,'Params must not be provided to .replace() when specifying an object');invariant(action==null,'Child action must not be provided to .replace() when specifying an object');invariant(newKey==null,'Child action must not be provided to .replace() when specifying an object');return StackActions.replace(replaceWith);},reset:function reset(actions,index){return StackActions.reset({actions:actions,index:index==null?actions.length-1:index,key:navStateKey});},dismiss:function dismiss(){return NavigationActions.back({key:navStateKey});}});},getStateForAction:function getStateForAction(action,state){if(!state){return getInitialState(action);}var activeChildRoute=state.routes[state.index];if(!isResetToRootStack(action)&&action.type!==NavigationActions.NAVIGATE){var activeChildRouter=childRouters[activeChildRoute.routeName];if(activeChildRouter){var route=activeChildRouter.getStateForAction(action,activeChildRoute);if(route!==null&&route!==activeChildRoute){return StateUtils.replaceAt(state,activeChildRoute.key,route,action.type===NavigationActions.SET_PARAMS);}}}else if(action.type===NavigationActions.NAVIGATE){for(var childRoute of state.routes.slice().reverse()){var childRouter=childRouters[childRoute.routeName];var childAction=action.routeName===childRoute.routeName&&action.action?action.action:action;if(childRouter){var nextRouteState=childRouter.getStateForAction(childAction,childRoute);if(nextRouteState===null||nextRouteState!==childRoute){var newState=StateUtils.replaceAndPrune(state,nextRouteState?nextRouteState.key:childRoute.key,nextRouteState?nextRouteState:childRoute);return _objectSpread(_objectSpread({},newState),{},{isTransitioning:state.index!==newState.index?action.immediate!==true:state.isTransitioning});}}}}if(behavesLikePushAction(action)&&childRouters[action.routeName]!==undefined){var _childRouter=childRouters[action.routeName];var _route;invariant(action.type!==StackActions.PUSH||action.key==null,'StackRouter does not support key on the push action');var lastRouteIndex=state.routes.findIndex(function(r){if(action.key){return r.key===action.key;}else{return r.routeName===action.routeName;}});if(action.type!==StackActions.PUSH&&lastRouteIndex!==-1){if(state.index===lastRouteIndex&&!action.params){return null;}var routes=state.routes.slice(0,lastRouteIndex+1);if(action.params){var _route2=state.routes[lastRouteIndex];routes[lastRouteIndex]=_objectSpread(_objectSpread({},_route2),{},{params:_objectSpread(_objectSpread({},_route2.params),action.params)});}return _objectSpread(_objectSpread({},state),{},{isTransitioning:state.index!==lastRouteIndex?action.immediate!==true:state.isTransitioning,index:lastRouteIndex,routes:routes});}if(_childRouter){var _childAction=action.action||NavigationActions.init({params:getParamsForRouteAndAction(action.routeName,action)});_route=_objectSpread(_objectSpread({params:getParamsForRouteAndAction(action.routeName,action)},_childRouter.getStateForAction(_childAction)),{},{routeName:action.routeName,key:action.key||generateKey()});}else{_route={params:getParamsForRouteAndAction(action.routeName,action),routeName:action.routeName,key:action.key||generateKey()};}return _objectSpread(_objectSpread({},StateUtils.push(state,_route)),{},{isTransitioning:action.immediate!==true});}else if(action.type===StackActions.PUSH&&childRouters[action.routeName]===undefined){return state;}if(behavesLikePushAction(action)){var childRouterNames=Object.keys(childRouters);for(var i=0;i<childRouterNames.length;i++){var childRouterName=childRouterNames[i];var _childRouter2=childRouters[childRouterName];if(_childRouter2){var initChildRoute=_childRouter2.getStateForAction(NavigationActions.init());var navigatedChildRoute=_childRouter2.getStateForAction(action,initChildRoute);var routeToPush=null;if(navigatedChildRoute===null){routeToPush=initChildRoute;}else if(navigatedChildRoute!==initChildRoute){routeToPush=navigatedChildRoute;}if(routeToPush){var _route3=_objectSpread(_objectSpread({},routeToPush),{},{routeName:childRouterName,key:action.key||generateKey()});return _objectSpread(_objectSpread({},StateUtils.push(state,_route3)),{},{isTransitioning:action.immediate!==true});}}}}if(action.type===StackActions.POP_TO_TOP){if(action.key&&state.key!==action.key){return state;}if(state.index>0){return _objectSpread(_objectSpread({},state),{},{isTransitioning:action.immediate!==true,index:0,routes:[state.routes[0]]});}return state;}if(action.type===StackActions.REPLACE){var routeIndex;if(action.key===undefined&&state.routes.length){routeIndex=state.routes.length-1;}else{routeIndex=state.routes.findIndex(function(r){return r.key===action.key;});}if(routeIndex!==-1){var _childRouter3=childRouters[action.routeName];var childState={};if(_childRouter3){var _childAction2=action.action||NavigationActions.init({params:getParamsForRouteAndAction(action.routeName,action)});childState=_childRouter3.getStateForAction(_childAction2);}var _routes=_toConsumableArray(state.routes);_routes[routeIndex]=_objectSpread(_objectSpread({params:getParamsForRouteAndAction(action.routeName,action)},childState),{},{routeName:action.routeName,key:action.newKey||generateKey()});return _objectSpread(_objectSpread({},state),{},{routes:_routes});}}if(action.type===StackActions.COMPLETE_TRANSITION&&(action.key==null||action.key===state.key)&&action.toChildKey===state.routes[state.index].key&&state.isTransitioning){return _objectSpread(_objectSpread({},state),{},{isTransitioning:false});}if(action.type===NavigationActions.SET_PARAMS){var key=action.key;var lastRoute=state.routes.find(function(route){return route.key===key;});if(lastRoute){var params=_objectSpread(_objectSpread({},lastRoute.params),action.params);var _routes2=_toConsumableArray(state.routes);_routes2[state.routes.indexOf(lastRoute)]=_objectSpread(_objectSpread({},lastRoute),{},{params:params});return _objectSpread(_objectSpread({},state),{},{routes:_routes2});}}if(action.type===StackActions.RESET){if(action.key!=null&&action.key!==state.key){return state;}var newStackActions=action.actions;return _objectSpread(_objectSpread({},state),{},{routes:newStackActions.map(function(newStackAction){var router=childRouters[newStackAction.routeName];var childState={};if(router){var _childAction3=newStackAction.action||NavigationActions.init({params:getParamsForRouteAndAction(newStackAction.routeName,newStackAction)});childState=router.getStateForAction(_childAction3);}return _objectSpread(_objectSpread({params:getParamsForRouteAndAction(newStackAction.routeName,newStackAction)},childState),{},{routeName:newStackAction.routeName,key:newStackAction.key||generateKey()});}),index:action.index});}if(action.type===NavigationActions.BACK||action.type===StackActions.POP){var _key=action.key,n=action.n,immediate=action.immediate,prune=action.prune;if(action.type===StackActions.POP&&prune===false&&_key){var index=state.routes.findIndex(function(r){return r.key===_key;});if(index>0){var count=Math.max(index-(n!==null&&n!==void 0?n:1)+1,1);var _routes3=state.routes.slice(0,count).concat(state.routes.slice(index+1));if(_routes3.length){return _objectSpread(_objectSpread({},state),{},{routes:_routes3,index:_routes3.length-1,isTransitioning:immediate!==true});}}}else{var backRouteIndex=state.index;if(action.type===StackActions.POP&&n!=null){backRouteIndex=Math.max(1,state.index-n+1);}else if(_key){var backRoute=state.routes.find(function(route){return route.key===_key;});backRouteIndex=state.routes.indexOf(backRoute);}if(backRouteIndex>0){return _objectSpread(_objectSpread({},state),{},{routes:state.routes.slice(0,backRouteIndex),index:backRouteIndex-1,isTransitioning:immediate!==true});}}}var keyIndex=action.key?StateUtils.indexOf(state,action.key):-1;for(var _childRoute of state.routes.slice().reverse()){if(_childRoute.key===activeChildRoute.key){continue;}if(keyIndex>=0&&_childRoute.key!==action.key){continue;}var _childRouter4=childRouters[_childRoute.routeName];if(_childRouter4){var _route4=_childRouter4.getStateForAction(action,_childRoute);if(_route4===null){return state;}else if(_route4&&_route4!==_childRoute){return StateUtils.replaceAt(state,_childRoute.key,_route4,action.preserveFocus||action.type.includes('DRAWER'));}}}return state;},getPathAndParamsForState:function getPathAndParamsForState(state){var route=state.routes[state.index];return getPathAndParamsForRoute(route);},getActionForPathAndParams:function getActionForPathAndParams(path,params){return _getActionForPathAndParams(path,params);},getScreenOptions:createConfigGetter(routeConfigs,stackConfig.defaultNavigationOptions)};});","map":{"version":3,"names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","key","routeConfigs","stackConfig","arguments","length","undefined","childRouters","routeNames","Object","keys","forEach","routeName","routeConfig","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","_objectSpread","navigate","initialRouteKey","getParamsForRouteAndAction","_createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","childRoute","slice","reverse","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","_toConsumableArray","COMPLETE_TRANSITION","toChildKey","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","prune","count","Math","max","concat","backRouteIndex","backRoute","keyIndex","preserveFocus","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-navigation/node_modules/@react-navigation/core/lib/module/routers/StackRouter.js"],"sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach((routeName) => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey(),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: (params) => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex((r) => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex((r) => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map((newStackAction) => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate, prune } = action;\n\n        if (action.type === StackActions.POP && prune === false && key) {\n          const index = state.routes.findIndex((r) => r.key === key);\n\n          if (index > 0) {\n            const count = Math.max(index - (n ?? 1) + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            if (routes.length) {\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n                isTransitioning: immediate !== true,\n              };\n            }\n          }\n        } else {\n          let backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            // determine the index to go back *from*. In this case, n=1 means to go\n            // back from state.index, as if it were a normal \"BACK\" action\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (key) {\n            const backRoute = state.routes.find((route) => route.key === key);\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return {\n              ...state,\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true,\n            };\n          }\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}