{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";var _isAvailableAsync,_shareAsync;import{UnavailabilityError}from'expo-modules-core';import Sharing from\"./ExpoSharing\";export function isAvailableAsync(){return(_isAvailableAsync=_isAvailableAsync||_asyncToGenerator(function*(){if(Sharing){if(Sharing.isAvailableAsync){return yield Sharing.isAvailableAsync();}return true;}return false;})).apply(this,arguments);}export function shareAsync(_x){return(_shareAsync=_shareAsync||_asyncToGenerator(function*(url){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!Sharing||!Sharing.shareAsync){throw new UnavailabilityError('Sharing','shareAsync');}return yield Sharing.shareAsync(url,options);})).apply(this,arguments);}","map":{"version":3,"names":["UnavailabilityError","Sharing","isAvailableAsync","_isAvailableAsync","_asyncToGenerator","apply","arguments","shareAsync","_x","_shareAsync","url","options","length","undefined"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/expo-sharing/src/Sharing.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport Sharing from './ExpoSharing';\n\n// @needsAudit\nexport type SharingOptions = {\n  /**\n   * Sets `mimeType` for `Intent`.\n   * @platform android\n   */\n  mimeType?: string;\n  /**\n   * [Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html)\n   *  - the type of the target file.\n   * @platform ios\n   */\n  UTI?: string;\n  /**\n   * Sets share dialog title.\n   * @platform android\n   * @platform web\n   */\n  dialogTitle?: string;\n};\n\n// @needsAudit\n/**\n * Determine if the sharing API can be used in this app.\n * @return A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n// @needsAudit\n/**\n * Opens action sheet to share file to different applications which can handle this type of file.\n * @param url Local file URL to share.\n * @param options A map of share options.\n */\nexport async function shareAsync(url: string, options: SharingOptions = {}): Promise<void> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"mappings":"yGAAA,OAASA,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAAC,OAAO,qBA4Bd,eAAsB,CAAAC,gBAAgBA,CAAA,SAAAC,iBAAA,CAAAA,iBAAA,EAAAC,iBAAA,CAA/B,WAA+B,CACpC,GAAIH,OAAO,CAAE,CACX,GAAIA,OAAO,CAACC,gBAAgB,CAAE,CAC5B,YAAa,CAAAD,OAAO,CAACC,gBAAgB,EAAE,C,CAEzC,MAAO,KAAI,C,CAGb,MAAO,MAAK,CACd,CAAC,GAAAG,KAAA,MAAAC,SAAA,GAQD,eAAsB,CAAAC,UAAUA,CAAAC,EAAA,SAAAC,WAAA,CAAAA,WAAA,EAAAL,iBAAA,CAAzB,UAA0BM,GAAW,CAA8B,IAA5B,CAAAC,OAAA,CAAAL,SAAA,CAAAM,MAAA,IAAAN,SAAA,MAAAO,SAAA,CAAAP,SAAA,IAA0B,EAAE,CACxE,GAAI,CAACL,OAAO,EAAI,CAACA,OAAO,CAACM,UAAU,CAAE,CACnC,KAAM,IAAI,CAAAP,mBAAmB,CAAC,SAAS,CAAE,YAAY,CAAC,C,CAExD,YAAa,CAAAC,OAAO,CAACM,UAAU,CAACG,GAAG,CAAEC,OAAO,CAAC,CAC/C,CAAC,GAAAN,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}