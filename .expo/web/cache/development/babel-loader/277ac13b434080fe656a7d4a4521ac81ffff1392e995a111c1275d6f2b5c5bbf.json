{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { DarkTheme, DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport { store, persistor } from \"./src/redux/store\";\nimport MainStack from \"./src/routes/MainStack\";\nimport { styling } from \"./src/theme\";\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport FlashMessage from 'react-native-flash-message';\nimport { Loader } from \"./src/components\";\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useFonts, Poppins_400Regular, Poppins_500Medium, Poppins_700Bold, Poppins_300Light } from \"@expo-google-fonts/poppins\";\nimport AppLoading from 'expo-app-loading';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nSplashScreen.preventAutoHideAsync();\nvar App = function App() {\n  var apptheme = useColorScheme();\n  var styles = styling(apptheme);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsReady = _useState2[0],\n    setAppIsReady = _useState2[1];\n  var _useFonts = useFonts({\n      \"Poppins-Light\": Poppins_300Light,\n      \"Poppins-Regular\": Poppins_400Regular,\n      \"Poppins-Medium\": Poppins_500Medium,\n      \"Poppins-Bold\": Poppins_700Bold\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  useEffect(function () {\n    var _prepare;\n    function prepare() {\n      return (_prepare = _prepare || _asyncToGenerator(function* () {\n        try {\n          yield SplashScreen.preventAutoHideAsync();\n          yield new Promise(function (resolve) {\n            return setTimeout(resolve, 2000);\n          });\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setAppIsReady(true);\n        }\n      })).apply(this, arguments);\n    }\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (appIsReady) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [appIsReady]);\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n  if (!appIsReady) {\n    return null;\n  }\n  return _jsx(View, {\n    style: styles.screen,\n    onLayout: onLayoutRootView,\n    children: _jsx(Provider, {\n      store: store,\n      children: _jsx(PersistGate, {\n        loading: null,\n        persistor: persistor,\n        children: _jsxs(PaperProvider, {\n          theme: DefaultTheme,\n          children: [_jsx(FlashMessage, {\n            position: 'top',\n            floating: true,\n            duration: 4000\n          }), _jsx(MainStack, {}), _jsx(Loader, {\n            theme: apptheme\n          })]\n        })\n      })\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["React","useCallback","useEffect","useState","SafeAreaView","useColorScheme","View","DarkTheme","DefaultTheme","Provider","PaperProvider","store","persistor","MainStack","styling","PersistGate","FlashMessage","Loader","SplashScreen","useFonts","Poppins_400Regular","Poppins_500Medium","Poppins_700Bold","Poppins_300Light","AppLoading","jsx","_jsx","jsxs","_jsxs","preventAutoHideAsync","App","apptheme","styles","_useState","_useState2","_slicedToArray","appIsReady","setAppIsReady","_useFonts","_useFonts2","fontsLoaded","_prepare","prepare","_asyncToGenerator","Promise","resolve","setTimeout","e","console","warn","apply","arguments","onLayoutRootView","hideAsync","style","screen","onLayout","children","loading","theme","position","floating","duration"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { SafeAreaView, useColorScheme, View } from 'react-native';\nimport {\n  DarkTheme,\n  DefaultTheme,\n  Provider as PaperProvider,\n} from 'react-native-paper';\nimport { store, persistor } from './src/redux/store';\n// import MainStack from './src/routes';\nimport MainStack from './src/routes/MainStack'\nimport { styling } from './src/theme';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport FlashMessage from 'react-native-flash-message';\nimport { Loader } from './src/components';\nimport * as SplashScreen from 'expo-splash-screen';\nimport {\n  useFonts,\n  Poppins_400Regular,\n  Poppins_500Medium,\n  Poppins_700Bold,\n  Poppins_300Light\n} from \"@expo-google-fonts/poppins\";\nimport AppLoading from 'expo-app-loading';\n// import Toast, { DURATION } from 'react-native-easy-toast'\n\nSplashScreen.preventAutoHideAsync();\n\nconst App = () => {\n  const apptheme = useColorScheme();\n  const styles = styling(apptheme);\n  const [appIsReady, setAppIsReady] = useState(false)\n\n  let [fontsLoaded] = useFonts({\n    \"Poppins-Light\": Poppins_300Light,\n    \"Poppins-Regular\": Poppins_400Regular,\n    \"Poppins-Medium\": Poppins_500Medium,\n    \"Poppins-Bold\": Poppins_700Bold,\n  });\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Keep the splash screen visible while we fetch resources\n        await SplashScreen.preventAutoHideAsync();\n        // Pre-load fonts, make any API calls you need to do here\n        // await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  // const [isLoaded] = useFonts({\n  //   \"Poppins-Bold\": require('./assets/fonts/Poppins-Bold.tff'),\n  //   \"light\": require('./assets/fonts/Poppins-Light.tff'),\n  //   \"medium\": require('./assets/fonts/Poppins-Medium.tff'),\n  //   \"regular\": require('./assets/fonts/Poppins-Regular.tff'),\n  // });\n\n  // const handleOnLayout = useCallback(async () => {\n  //   if (isLoaded) {\n  //     await SplashScreen.hideAsync(); //hide the splashscreen\n  //   }\n  // }, [isLoaded]);\n\n  return (\n    // <SafeAreaView >\n    <View style={styles.screen} onLayout={onLayoutRootView}>\n      <Provider store={store} >\n        <PersistGate loading={null} persistor={persistor}>\n          <PaperProvider theme={DefaultTheme}>\n            {/* <Toast ref={(toast) => this.toast = toast} /> */}\n            <FlashMessage position={'top'} floating={true} duration={4000} />\n            <MainStack />\n            <Loader theme={apptheme} />\n          </PaperProvider>\n        </PersistGate>\n      </Provider>\n    </View>\n    // </SafeAreaView>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}