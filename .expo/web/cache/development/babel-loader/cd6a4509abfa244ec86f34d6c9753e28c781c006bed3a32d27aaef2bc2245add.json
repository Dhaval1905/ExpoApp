{"ast":null,"code":"import { useRoute } from '@react-navigation/native';\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput } from 'react-native-paper';\nimport { CustomButton, CustomHeader } from \"../../components\";\nimport { Strings } from \"../../constants\";\nimport { Colors } from \"../../theme\";\nimport styling from \"./EditBusinessAddressStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EditBusinessAddressScreen = function EditBusinessAddressScreen(_ref) {\n  var _route$params, _Strings$businessAddr, _Colors$theme, _Strings$unitSuite, _Colors$theme2, _Strings$city, _Colors$theme3, _Strings$state, _Colors$theme4, _Strings$zip, _Colors$theme5;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var theme = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.theme;\n  var styles = styling(theme);\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(CustomHeader, {\n      theme: theme,\n      headerTitle: Strings.editBusinessAddress,\n      onPressBack: function onPressBack() {\n        return navigation.goBack();\n      }\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.card,\n        children: [_jsx(Text, {\n          style: styles.cardTitle,\n          children: Strings.businessAddressQuestion\n        }), _jsx(TextInput, {\n          label: (_Strings$businessAddr = Strings.businessAddress) == null ? void 0 : _Strings$businessAddr.toUpperCase(),\n          mode: 'outlined',\n          theme: {\n            roundness: 45,\n            colors: '#000'\n          },\n          style: styles.textInput,\n          activeOutlineColor: (_Colors$theme = Colors[theme]) == null ? void 0 : _Colors$theme.grey500\n        }), _jsx(TextInput, {\n          label: (_Strings$unitSuite = Strings.unitSuite) == null ? void 0 : _Strings$unitSuite.toUpperCase(),\n          mode: 'outlined',\n          theme: {\n            roundness: 45,\n            colors: '#000'\n          },\n          style: styles.textInput,\n          activeOutlineColor: (_Colors$theme2 = Colors[theme]) == null ? void 0 : _Colors$theme2.grey500\n        }), _jsx(TextInput, {\n          label: (_Strings$city = Strings.city) == null ? void 0 : _Strings$city.toUpperCase(),\n          mode: 'outlined',\n          theme: {\n            roundness: 45,\n            colors: '#000'\n          },\n          style: styles.textInput,\n          activeOutlineColor: (_Colors$theme3 = Colors[theme]) == null ? void 0 : _Colors$theme3.grey500\n        }), _jsx(TextInput, {\n          label: (_Strings$state = Strings.state) == null ? void 0 : _Strings$state.toUpperCase(),\n          mode: 'outlined',\n          theme: {\n            roundness: 45,\n            colors: '#000'\n          },\n          style: styles.textInput,\n          activeOutlineColor: (_Colors$theme4 = Colors[theme]) == null ? void 0 : _Colors$theme4.grey500\n        }), _jsx(TextInput, {\n          label: (_Strings$zip = Strings.zip) == null ? void 0 : _Strings$zip.toUpperCase(),\n          mode: 'outlined',\n          theme: {\n            roundness: 45,\n            colors: '#000'\n          },\n          style: styles.textInput,\n          activeOutlineColor: (_Colors$theme5 = Colors[theme]) == null ? void 0 : _Colors$theme5.grey500\n        })]\n      })\n    }), _jsx(View, {\n      style: styles.bottomView,\n      children: _jsx(CustomButton, {\n        theme: theme,\n        buttonTitle: Strings.continue,\n        buttonStyle: styles.continueButton\n      })\n    })]\n  });\n};\nexport default EditBusinessAddressScreen;","map":{"version":3,"names":["useRoute","React","Text","View","TextInput","CustomButton","CustomHeader","Strings","Colors","styling","jsx","_jsx","jsxs","_jsxs","EditBusinessAddressScreen","_ref","_route$params","_Strings$businessAddr","_Colors$theme","_Strings$unitSuite","_Colors$theme2","_Strings$city","_Colors$theme3","_Strings$state","_Colors$theme4","_Strings$zip","_Colors$theme5","navigation","route","theme","params","styles","style","screen","children","headerTitle","editBusinessAddress","onPressBack","goBack","container","card","cardTitle","businessAddressQuestion","label","businessAddress","toUpperCase","mode","roundness","colors","textInput","activeOutlineColor","grey500","unitSuite","city","state","zip","bottomView","buttonTitle","continue","buttonStyle","continueButton"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/src/modules/EditBusinessAddress/EditBusinessAddressScreen.js"],"sourcesContent":["import {useRoute} from '@react-navigation/native';\nimport React from 'react';\nimport {Text, View} from 'react-native';\nimport {TextInput} from 'react-native-paper';\nimport {CustomButton, CustomHeader} from '../../components';\nimport {Strings} from '../../constants';\nimport {Colors} from '../../theme';\nimport styling from './EditBusinessAddressStyle';\n\nconst EditBusinessAddressScreen = ({navigation}) => {\n  const route = useRoute();\n  const theme = route?.params?.theme;\n  const styles = styling(theme);\n\n  return (\n    <View style={styles.screen}>\n      <CustomHeader\n        theme={theme}\n        headerTitle={Strings.editBusinessAddress}\n        onPressBack={() => navigation.goBack()}\n      />\n      <View style={styles.container}>\n        <View style={styles.card}>\n          <Text style={styles.cardTitle}>\n            {Strings.businessAddressQuestion}\n          </Text>\n          <TextInput\n            label={Strings.businessAddress?.toUpperCase()}\n            mode={'outlined'}\n            theme={{roundness:45,colors:'#000'}}\n            style={styles.textInput}\n            activeOutlineColor={Colors[theme]?.grey500}\n          />\n          <TextInput\n            label={Strings.unitSuite?.toUpperCase()}\n            mode={'outlined'}\n            theme={{roundness:45,colors:'#000'}}\n            style={styles.textInput}\n            activeOutlineColor={Colors[theme]?.grey500}\n          />\n            <TextInput\n              label={Strings.city?.toUpperCase()}\n              mode={'outlined'}\n              theme={{roundness:45,colors:'#000'}}\n              style={styles.textInput}\n              activeOutlineColor={Colors[theme]?.grey500}\n            />\n            <TextInput\n              label={Strings.state?.toUpperCase()}\n              mode={'outlined'}\n              theme={{roundness:45,colors:'#000'}}\n              style={styles.textInput}\n              activeOutlineColor={Colors[theme]?.grey500}\n            />\n            <TextInput\n              label={Strings.zip?.toUpperCase()}\n              mode={'outlined'}\n              theme={{roundness:45,colors:'#000'}}\n              style={styles.textInput}\n              activeOutlineColor={Colors[theme]?.grey500}\n            />\n        </View>\n      </View>\n      <View style={styles.bottomView}>\n        <CustomButton\n          theme={theme}\n          buttonTitle={Strings.continue}\n          buttonStyle={styles.continueButton}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default EditBusinessAddressScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}