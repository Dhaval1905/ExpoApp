{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _isAvailableAsync, _shareAsync;\nimport { UnavailabilityError } from 'expo-modules-core';\nimport Sharing from \"./ExpoSharing\";\nexport function isAvailableAsync() {\n  return (_isAvailableAsync = _isAvailableAsync || _asyncToGenerator(function* () {\n    if (Sharing) {\n      if (Sharing.isAvailableAsync) {\n        return yield Sharing.isAvailableAsync();\n      }\n      return true;\n    }\n    return false;\n  })).apply(this, arguments);\n}\nexport function shareAsync(_x) {\n  return (_shareAsync = _shareAsync || _asyncToGenerator(function* (url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!Sharing || !Sharing.shareAsync) {\n      throw new UnavailabilityError('Sharing', 'shareAsync');\n    }\n    return yield Sharing.shareAsync(url, options);\n  })).apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","Sharing","isAvailableAsync","_isAvailableAsync","_asyncToGenerator","apply","arguments","shareAsync","_x","_shareAsync","url","options","length","undefined"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/expo-sharing/src/Sharing.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport Sharing from './ExpoSharing';\n\n// @needsAudit\nexport type SharingOptions = {\n  /**\n   * Sets `mimeType` for `Intent`.\n   * @platform android\n   */\n  mimeType?: string;\n  /**\n   * [Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html)\n   *  - the type of the target file.\n   * @platform ios\n   */\n  UTI?: string;\n  /**\n   * Sets share dialog title.\n   * @platform android\n   * @platform web\n   */\n  dialogTitle?: string;\n};\n\n// @needsAudit\n/**\n * Determine if the sharing API can be used in this app.\n * @return A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n// @needsAudit\n/**\n * Opens action sheet to share file to different applications which can handle this type of file.\n * @param url Local file URL to share.\n * @param options A map of share options.\n */\nexport async function shareAsync(url: string, options: SharingOptions = {}): Promise<void> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"mappings":";;AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,OAAO;AA4Bd,gBAAsBC,gBAAgBA,CAAA;EAAA,QAAAC,iBAAA,GAAAA,iBAAA,IAAAC,iBAAA,CAA/B,aAA+B;IACpC,IAAIH,OAAO,EAAE;MACX,IAAIA,OAAO,CAACC,gBAAgB,EAAE;QAC5B,aAAaD,OAAO,CAACC,gBAAgB,EAAE;;MAEzC,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd,CAAC,GAAAG,KAAA,OAAAC,SAAA;AAAA;AAQD,gBAAsBC,UAAUA,CAAAC,EAAA;EAAA,QAAAC,WAAA,GAAAA,WAAA,IAAAL,iBAAA,CAAzB,WAA0BM,GAAW,EAA8B;IAAA,IAA5BC,OAAA,GAAAL,SAAA,CAAAM,MAAA,QAAAN,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAA0B,EAAE;IACxE,IAAI,CAACL,OAAO,IAAI,CAACA,OAAO,CAACM,UAAU,EAAE;MACnC,MAAM,IAAIP,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC;;IAExD,aAAaC,OAAO,CAACM,UAAU,CAACG,GAAG,EAAEC,OAAO,CAAC;EAC/C,CAAC,GAAAN,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}