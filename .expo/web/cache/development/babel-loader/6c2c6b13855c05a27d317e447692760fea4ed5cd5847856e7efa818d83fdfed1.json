{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRoute } from '@react-navigation/native';\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport { CustomHeader } from \"../../components\";\nimport { navigationStrings } from \"../../constants\";\nimport { manageRethinkCard, Strings } from \"../../constants/Strings\";\nimport { Colors, moderateScale } from \"../../theme\";\nimport styling from \"./RethinkPhysicalStyle\";\nimport * as constants from \"../../utils/constant\";\nimport { useDispatch } from 'react-redux';\nimport { getProductCard, issue_Card } from \"../../redux/actions/card\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar RethinkPhysicalScreen = function RethinkPhysicalScreen(_ref) {\n  var _route$params, _Strings$manageDebitC;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var dispatch = useDispatch();\n  var theme = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.theme;\n  var styles = styling(theme);\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    cardProductId = _useState2[0],\n    setCardProductId = _useState2[1];\n  var issueCard = function issueCard() {};\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(CustomHeader, {\n      theme: theme,\n      headerTitle: Strings.rethinkCard,\n      onPressBack: function onPressBack() {\n        return navigation.goBack();\n      }\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.manageDebitCard,\n        children: (_Strings$manageDebitC = Strings.manageDebitCard) == null ? void 0 : _Strings$manageDebitC.toUpperCase()\n      }), _jsx(View, {\n        style: styles.card,\n        children: manageRethinkCard == null ? void 0 : manageRethinkCard.map(function (value, index) {\n          var _ref2, _Colors$theme;\n          var onPress = function onPress() {\n            return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n              if (value === 'Issue Card') {\n                navigation.navigate(navigationStrings.IssueCard);\n              }\n            })).apply(this, arguments);\n          };\n          return _jsxs(View, {\n            children: [_jsxs(TouchableOpacity, {\n              style: styles.cardItem,\n              onPress: onPress,\n              children: [_jsx(Text, {\n                style: styles.cardItemName,\n                children: value\n              }), _jsx(FontAwesome, {\n                name: 'angle-right',\n                color: (_Colors$theme = Colors[theme]) == null ? void 0 : _Colors$theme.grey500,\n                size: moderateScale(24)\n              })]\n            }), index !== (manageRethinkCard == null ? void 0 : manageRethinkCard.length) - 1 ? _jsx(View, {\n              style: styles.divider\n            }) : _jsx(_Fragment, {})]\n          }, index);\n        })\n      })]\n    })]\n  });\n};\nexport default RethinkPhysicalScreen;","map":{"version":3,"names":["useRoute","React","useState","useEffect","Text","TouchableOpacity","View","FontAwesome","CustomHeader","navigationStrings","manageRethinkCard","Strings","Colors","moderateScale","styling","constants","useDispatch","getProductCard","issue_Card","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","RethinkPhysicalScreen","_ref","_route$params","_Strings$manageDebitC","navigation","route","dispatch","theme","params","styles","_useState","_useState2","_slicedToArray","cardProductId","setCardProductId","issueCard","style","screen","children","headerTitle","rethinkCard","onPressBack","goBack","container","manageDebitCard","toUpperCase","card","map","value","index","_ref2","_Colors$theme","onPress","_asyncToGenerator","navigate","IssueCard","apply","arguments","cardItem","cardItemName","name","color","grey500","size","length","divider"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/src/modules/RethinkPhysical/RethinkPhysicalScreen.js"],"sourcesContent":["import { useRoute } from '@react-navigation/native';\nimport React, { useState, useEffect } from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport { CustomHeader } from '../../components';\nimport { navigationStrings } from '../../constants';\nimport { manageRethinkCard, Strings } from '../../constants/Strings';\nimport { Colors, moderateScale } from '../../theme';\nimport styling from './RethinkPhysicalStyle';\nimport * as constants from '../../utils/constant';\nimport { useDispatch } from 'react-redux';\nimport { getProductCard, issue_Card } from '../../redux/actions/card';\n\nconst RethinkPhysicalScreen = ({ navigation }) => {\n  const route = useRoute();\n  const dispatch = useDispatch();\n  const theme = route?.params?.theme;\n  const styles = styling(theme);\n\n  const [cardProductId, setCardProductId] = useState('')\n\n\n  const issueCard = () => {\n  \n  }\n  return (\n    <View style={styles.screen}>\n      <CustomHeader\n        theme={theme}\n        headerTitle={Strings.rethinkCard}\n        onPressBack={() => navigation.goBack()}\n      />\n      <View style={styles.container}>\n        <Text style={styles.manageDebitCard}>\n          {Strings.manageDebitCard?.toUpperCase()}\n        </Text>\n        <View style={styles.card}>\n          {manageRethinkCard?.map((value, index) => {\n            const onPress = async() => {\n              if (value === 'Issue Card') {\n   \n                navigation.navigate(navigationStrings.IssueCard);\n              }\n            };\n            return (\n              <View key={index}>\n                <TouchableOpacity style={styles.cardItem} onPress={onPress}>\n                  <Text style={styles.cardItemName}>{value}</Text>\n                  <FontAwesome\n                    name={'angle-right'}\n                    color={Colors[theme]?.grey500}\n                    size={moderateScale(24)}\n                  />\n                </TouchableOpacity>\n                {index !== manageRethinkCard?.length - 1 ? (\n                  <View style={styles.divider} />\n                ) : (\n                  <></>\n                )}\n              </View>\n            );\n          })}\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default RethinkPhysicalScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}