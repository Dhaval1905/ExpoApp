{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _excluded = [\"contentModel\", \"tagName\", \"isOpaque\", \"isVoid\"],\n  _excluded2 = [\"category\", \"isOpaque\", \"isVoid\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _HTMLContentModel = _interopRequireDefault(require(\"./HTMLContentModel\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar phrasingCategories = ['textual', 'edits', 'anchor'];\nvar translatableBlockCategories = ['tabular', 'grouping', 'sectioning'];\nvar HTMLElementModel = function () {\n  function HTMLElementModel(_ref) {\n    var tagName = _ref.tagName,\n      contentModel = _ref.contentModel,\n      isOpaque = _ref.isOpaque,\n      mixedUAStyles = _ref.mixedUAStyles,\n      isVoid = _ref.isVoid,\n      getUADerivedStyleFromAttributes = _ref.getUADerivedStyleFromAttributes,\n      getMixedUAStyles = _ref.getMixedUAStyles,\n      setMarkersForTNode = _ref.setMarkersForTNode,\n      getReactNativeProps = _ref.getReactNativeProps,\n      reactNativeProps = _ref.reactNativeProps;\n    _classCallCheck(this, HTMLElementModel);\n    _defineProperty(this, \"tagName\", void 0);\n    _defineProperty(this, \"contentModel\", void 0);\n    _defineProperty(this, \"isOpaque\", void 0);\n    _defineProperty(this, \"isVoid\", void 0);\n    _defineProperty(this, \"mixedUAStyles\", void 0);\n    _defineProperty(this, \"reactNativeProps\", void 0);\n    _defineProperty(this, \"getUADerivedStyleFromAttributes\", void 0);\n    _defineProperty(this, \"getMixedUAStyles\", void 0);\n    _defineProperty(this, \"getReactNativeProps\", void 0);\n    _defineProperty(this, \"setMarkersForTNode\", void 0);\n    this.tagName = tagName;\n    this.contentModel = contentModel;\n    this.isOpaque = isOpaque || false;\n    this.isVoid = isVoid;\n    this.mixedUAStyles = mixedUAStyles;\n    this.getUADerivedStyleFromAttributes = getUADerivedStyleFromAttributes;\n    this.getMixedUAStyles = getMixedUAStyles;\n    this.setMarkersForTNode = setMarkersForTNode;\n    this.getReactNativeProps = getReactNativeProps;\n    this.reactNativeProps = reactNativeProps;\n  }\n  _createClass(HTMLElementModel, [{\n    key: \"isTranslatableBlock\",\n    value: function isTranslatableBlock() {\n      return this.contentModel === _HTMLContentModel.default.block;\n    }\n  }, {\n    key: \"isTranslatableTextual\",\n    value: function isTranslatableTextual() {\n      return this.contentModel === _HTMLContentModel.default.textual || this.contentModel === _HTMLContentModel.default.mixed;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(arg) {\n      var properties = typeof arg === 'function' ? arg(this) : arg;\n      return new HTMLElementModel(_objectSpread(_objectSpread({}, this), properties));\n    }\n  }], [{\n    key: \"fromCustomModel\",\n    value: function fromCustomModel(template) {\n      var contentModel = template.contentModel,\n        tagName = template.tagName,\n        _template$isOpaque = template.isOpaque,\n        isOpaque = _template$isOpaque === void 0 ? false : _template$isOpaque,\n        _template$isVoid = template.isVoid,\n        isVoid = _template$isVoid === void 0 ? false : _template$isVoid,\n        optionalFields = _objectWithoutProperties(template, _excluded);\n      return new HTMLElementModel(_objectSpread({\n        tagName: tagName,\n        contentModel: contentModel,\n        isOpaque: isOpaque,\n        isVoid: isVoid\n      }, optionalFields));\n    }\n  }, {\n    key: \"fromNativeModel\",\n    value: function fromNativeModel(nativeElementModel) {\n      var category = nativeElementModel.category,\n        isOpaque = nativeElementModel.isOpaque,\n        _nativeElementModel$i = nativeElementModel.isVoid,\n        isVoid = _nativeElementModel$i === void 0 ? false : _nativeElementModel$i,\n        otherProps = _objectWithoutProperties(nativeElementModel, _excluded2);\n      var isPhrasing = phrasingCategories.indexOf(category) !== -1;\n      var isTranslatable = isPhrasing || translatableBlockCategories.indexOf(category) !== -1;\n      var contentModel = category === 'anchor' || category === 'edits' ? _HTMLContentModel.default.mixed : isPhrasing ? _HTMLContentModel.default.textual : isTranslatable ? _HTMLContentModel.default.block : _HTMLContentModel.default.none;\n      return new HTMLElementModel(_objectSpread({\n        isVoid: isVoid,\n        contentModel: contentModel,\n        isOpaque: isOpaque !== null && isOpaque !== void 0 ? isOpaque : category === 'embedded'\n      }, otherProps));\n    }\n  }]);\n  return HTMLElementModel;\n}();\nexports.default = HTMLElementModel;","map":{"version":3,"names":["_HTMLContentModel","_interopRequireDefault","require","phrasingCategories","translatableBlockCategories","HTMLElementModel","_ref","tagName","contentModel","isOpaque","mixedUAStyles","isVoid","getUADerivedStyleFromAttributes","getMixedUAStyles","setMarkersForTNode","getReactNativeProps","reactNativeProps","_classCallCheck","_defineProperty","_createClass","key","value","isTranslatableBlock","default","block","isTranslatableTextual","textual","mixed","extend","arg","properties","_objectSpread","fromCustomModel","template","_template$isOpaque","_template$isVoid","optionalFields","_objectWithoutProperties","_excluded","fromNativeModel","nativeElementModel","category","_nativeElementModel$i","otherProps","_excluded2","isPhrasing","indexOf","isTranslatable","none"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-native-render-html/node_modules/@native-html/transient-render-engine/lib/commonjs/model/HTMLElementModel.ts"],"sourcesContent":["/* eslint-disable no-dupe-class-members */\nimport { MixedStyleDeclaration } from '@native-html/css-processor';\nimport { ReactNativePropsDefinitions } from '../helper-types';\nimport { SetMarkersForTNode } from '../tree/tree-types';\nimport HTMLContentModel from './HTMLContentModel';\nimport {\n  CustomElementModel,\n  ElementCategory,\n  ElementModelBase,\n  NativeElementModel,\n  TagName\n} from './model-types';\n\nconst phrasingCategories: ElementCategory[] = ['textual', 'edits', 'anchor'];\nconst translatableBlockCategories: ElementCategory[] = [\n  'tabular',\n  'grouping',\n  'sectioning'\n];\n\n/**\n * An object to specify custom tags.\n *\n * @typeParam T - The name of the tag to which the model will apply.\n * @typeParam M - The {@link HTMLContentModel} associated with this tag.\n */\nexport interface HTMLElementModelShape<\n  T extends string,\n  M extends HTMLContentModel\n> extends ElementModelBase<T> {\n  /**\n   * The {@link HTMLContentModel} attached to this model.\n   */\n  readonly contentModel: M;\n  /**\n   * `true` when the associated tag is a {@link https://html.spec.whatwg.org/multipage/syntax.html#void-elements | void element}.\n   *\n   * @remarks\n   *\n   * - Void elements cannot have children.\n   * - TText-translated void elements will be preserved even though they don't\n   *   have children.\n   */\n  readonly isVoid: boolean;\n  /**\n   * An opaque element translated {@link TNode} will have no translated {@link TNode}\n   * children.\n   */\n  readonly isOpaque: boolean;\n}\n\n/**\n * An object defining engine internals for tags, such as default styles\n * (UAStyles), content model (how this tag is treated during hoisting)... etc.\n *\n * @typeParam T - The name of the tag to which the model will apply.\n * @typeParam M - The {@link HTMLContentModel} associated with this tag.\n */\nexport default class HTMLElementModel<\n  T extends string,\n  M extends HTMLContentModel\n> implements HTMLElementModelShape<T, M>\n{\n  /**\n   * The tag name associated with this model.\n   */\n  public readonly tagName: T;\n  /**\n   * The {@link HTMLContentModel} attached to this model.\n   */\n  public readonly contentModel: M;\n  /**\n   * An opaque element translated {@link TNode} will have no translated {@link TNode}\n   * children.\n   */\n  public readonly isOpaque: boolean;\n  /**\n   * `true` when the associated tag is a {@link https://html.spec.whatwg.org/multipage/syntax.html#void-elements | void element}.\n   *\n   * @remarks\n   *\n   * - Void elements cannot have children.\n   * - TText-translated void elements will be preserved even though they don't\n   *   have children.\n   */\n  public readonly isVoid: boolean;\n  /**\n   * Equivalent of \"user-agent\" styles. The default styles for the element.\n   *\n   * @remarks These styles will be merged over by `tagsStyles`.\n   */\n  public readonly mixedUAStyles?: MixedStyleDeclaration;\n  /**\n   * React Native props grouped by native components. Those props\n   * will be passed to the underlying native component at render time.\n   *\n   * @remarks Some props might be overriden by props derived from the\n   * {@link TNode} attributes. For example, if you pass `accessibilityLabel`\n   * and there is an `aria-label` attribute attached to one node, the\n   * `aria-label` will be used. If you want to be able to override the\n   * `aria-label`, use {@link HTMLElementModel.getReactNativeProps} instead.\n   *\n   * @example\n   *\n   * ```ts\n   * import {HTMLElementModel, HTMLContentModel} from 'react-native-render-html';\n   *\n   * const customHTMLElementModels = {\n   *  'nav-button': HTMLElementModel.fromCustomModel({\n   *    tagName: 'nav-button',\n   *    contentModel: HTMLContentModel.block,\n   *    reactNativeProps: {\n   *      native: {\n   *        onPress() {\n   *          console.info('nav-button pressed');\n   *        },\n   *      },\n   *    },\n   *  }),\n   *};\n   * ```\n   */\n  readonly reactNativeProps?: ReactNativePropsDefinitions;\n  /**\n   * A function to create conditional \"user-agent\" styles.\n   *\n   * @deprecated Use {@link HTMLElementModel.getMixedUAStyles} instead.\n   */\n  public readonly getUADerivedStyleFromAttributes: NativeElementModel['getUADerivedStyleFromAttributes'];\n  /**\n   * A function to create conditional \"user-agent\" styles.\n   *\n   * @remarks For example, &lt;a&gt; tags will have underline decoration and be\n   * colored blue only when `href` is defined.\n   */\n  public readonly getMixedUAStyles: NativeElementModel['getMixedUAStyles'];\n  /**\n   * A function to create React Native props from a {@link TNode} grouped by\n   * native components.\n   *\n   * Those props will be deep-merged over the pre-generated props. You can\n   * preserve some of the pre-generated props since you receive them as second\n   * argument.\n   *\n   * **Merge strategy** (latest overrides former):\n   *\n   * 1. props from `reactNativeProps`,\n   * 2. auto-generated props from attributes\n   * 3. props returned by this function\n   *\n   * @param tnode - The {@link TNode} for which to create React Native props.\n   * @param preGeneratedProps - The props that were pre-generated for the {@link TNode}\n   * based on attributes (e.g. aria-label ...) and\n   * {@link ElementModelBase.reactNativeProps}.\n   * @returns React Native props grouped by native components (see\n   * {@link ReactNativePropsDefinitions}). Those props will be passed to the\n   * underlying native component at render time.\n   *\n   * @example\n   *\n   * ```ts\n   * import { defaultHTMLElementModels } from \"react-native-render-html\";\n   *\n   * const customHTMLElementModels = {\n   *   a: defaultHTMLElementModels.a.extend({\n   *     getReactNativeProps(tnode) {\n   *       const attributes = tnode.attributes;\n   *       return {\n   *         native: {\n   *           accessibilityHint:\n   *             attributes['data-scope'] === 'internal'\n   *               ? 'Open in a new screen.'\n   *               : 'Open in system web browser.',\n   *         },\n   *       };\n   *     },\n   *   }),\n   * };\n   * ```\n   */\n  public readonly getReactNativeProps: NativeElementModel['getReactNativeProps'];\n\n  /**\n   * Derive markers for one TNode.\n   */\n  public readonly setMarkersForTNode?: SetMarkersForTNode;\n\n  private constructor({\n    tagName,\n    contentModel,\n    isOpaque,\n    mixedUAStyles,\n    isVoid,\n    getUADerivedStyleFromAttributes,\n    getMixedUAStyles,\n    setMarkersForTNode,\n    getReactNativeProps,\n    reactNativeProps\n  }: HTMLElementModelShape<T, M>) {\n    this.tagName = tagName;\n    this.contentModel = contentModel;\n    this.isOpaque = isOpaque || false;\n    this.isVoid = isVoid;\n    this.mixedUAStyles = mixedUAStyles;\n    this.getUADerivedStyleFromAttributes = getUADerivedStyleFromAttributes;\n    this.getMixedUAStyles = getMixedUAStyles;\n    this.setMarkersForTNode = setMarkersForTNode;\n    this.getReactNativeProps = getReactNativeProps;\n    this.reactNativeProps = reactNativeProps;\n  }\n\n  /**\n   * Create an {@link HTMLElementModel} from a custom template.\n   *\n   * @param template - The custom template.\n   */\n  static fromCustomModel<\n    CustomTags extends string,\n    ContentModel extends HTMLContentModel\n  >(template: CustomElementModel<CustomTags, ContentModel>) {\n    const {\n      contentModel,\n      tagName,\n      isOpaque = false,\n      isVoid = false,\n      ...optionalFields\n    } = template;\n    return new HTMLElementModel<CustomTags, ContentModel>({\n      tagName,\n      contentModel,\n      isOpaque,\n      isVoid,\n      ...optionalFields\n    });\n  }\n\n  /**\n   * Create an {@link HTMLElementModel} from a native description.\n   *\n   * @param nativeElementModel - The native model declaration.\n   */\n  static fromNativeModel<TN extends TagName, E extends ElementCategory>(\n    nativeElementModel: NativeElementModel<TN, E>\n  ) {\n    const {\n      category,\n      isOpaque,\n      isVoid = false,\n      ...otherProps\n    } = nativeElementModel;\n    const isPhrasing = phrasingCategories.indexOf(category) !== -1;\n    const isTranslatable =\n      isPhrasing || translatableBlockCategories.indexOf(category) !== -1;\n    const contentModel =\n      category === 'anchor' || category === 'edits'\n        ? HTMLContentModel.mixed\n        : isPhrasing\n        ? HTMLContentModel.textual\n        : isTranslatable\n        ? HTMLContentModel.block\n        : HTMLContentModel.none;\n    return new HTMLElementModel<\n      TN,\n      E extends 'edits' | 'anchor'\n        ? HTMLContentModel.mixed\n        : E extends 'sectioning' | 'grouping' | 'tabular'\n        ? HTMLContentModel.block\n        : E extends 'textual'\n        ? HTMLContentModel.textual\n        : HTMLContentModel.none\n    >({\n      isVoid,\n      contentModel: contentModel as any,\n      isOpaque: isOpaque ?? category === 'embedded',\n      ...otherProps\n    });\n  }\n\n  isTranslatableBlock(): boolean {\n    return this.contentModel === HTMLContentModel.block;\n  }\n\n  isTranslatableTextual() {\n    return (\n      this.contentModel === HTMLContentModel.textual ||\n      this.contentModel === HTMLContentModel.mixed\n    );\n  }\n\n  /**\n   * Create a new {@link HTMLElementModel} by shallow-merging properties into this model.\n   *\n   * @param merger - A function to generate the new properties to shallow-merge into this model.\n   * @typeParam CM - The {@link HTMLContentModel} attached to the new model.\n   */\n  extend<CM extends HTMLContentModel>(\n    merger: (\n      shape: HTMLElementModelShape<T, CM>\n    ) => Partial<HTMLElementModelShape<T, CM>>\n  ): HTMLElementModel<T, CM>;\n  /**\n   * Create a new {@link HTMLElementModel} by shallow-merging properties into this model.\n   *\n   * @param shape - The {@link HTMLElementModelShape} to shallow-merge into this model.\n   * @typeParam CM - The {@link HTMLContentModel} attached to the new model.\n   */\n  extend<CM extends HTMLContentModel>(\n    shape: Partial<HTMLElementModelShape<T, CM>>\n  ): HTMLElementModel<T, CM>;\n  extend<CM extends HTMLContentModel>(\n    arg:\n      | ((\n          shape: HTMLElementModelShape<T, M>\n        ) => Partial<HTMLElementModelShape<T, CM>>)\n      | Partial<HTMLElementModelShape<T, CM>>\n  ): HTMLElementModel<T, CM> {\n    const properties = typeof arg === 'function' ? arg(this) : arg;\n    return new HTMLElementModel<T, CM>({\n      ...this,\n      ...properties\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}