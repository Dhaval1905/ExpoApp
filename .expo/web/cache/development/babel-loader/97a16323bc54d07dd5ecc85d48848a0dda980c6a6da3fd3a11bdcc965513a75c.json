{"ast":null,"code":"import { useRoute } from '@react-navigation/native';\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Feather from \"@expo/vector-icons/Feather\";\nimport { CustomHeader } from \"../../components\";\nimport { navigationStrings, Strings } from \"../../constants\";\nimport { Colors, moderateScale } from \"../../theme\";\nimport styling from \"./UsersStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UsersScreen = function UsersScreen(_ref) {\n  var _route$params, _Colors$theme;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var theme = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.theme;\n  var styles = styling(theme);\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsxs(View, {\n      style: styles.headerParent,\n      children: [_jsx(CustomHeader, {\n        theme: theme,\n        headerTitle: Strings.users,\n        onPressBack: function onPressBack() {\n          return navigation.goBack();\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate(navigationStrings.ADDUSERREQ);\n        },\n        children: _jsx(Feather, {\n          name: \"user-plus\",\n          size: moderateScale(24),\n          color: (_Colors$theme = Colors[theme]) == null ? void 0 : _Colors$theme.blue\n        })\n      })]\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsxs(TouchableOpacity, {\n        style: styles.card,\n        children: [_jsxs(View, {\n          children: [_jsx(Text, {\n            style: styles.username,\n            children: 'Username'\n          }), _jsx(Text, {\n            style: styles.usermail,\n            children: 'User Email'\n          })]\n        }), _jsx(Text, {\n          style: styles.userType,\n          children: 'User type'\n        })]\n      })\n    })]\n  });\n};\nexport default UsersScreen;","map":{"version":3,"names":["useRoute","React","Text","TouchableOpacity","View","Feather","CustomHeader","navigationStrings","Strings","Colors","moderateScale","styling","jsx","_jsx","jsxs","_jsxs","UsersScreen","_ref","_route$params","_Colors$theme","navigation","route","theme","params","styles","style","screen","children","headerParent","headerTitle","users","onPressBack","goBack","onPress","navigate","ADDUSERREQ","name","size","color","blue","container","card","username","usermail","userType"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/src/modules/Users/UsersScreen.js"],"sourcesContent":["import {useRoute} from '@react-navigation/native';\nimport React from 'react';\nimport {Text, TouchableOpacity, View} from 'react-native';\nimport Feather from 'react-native-vector-icons/Feather';\nimport {CustomHeader} from '../../components';\nimport {navigationStrings, Strings} from '../../constants';\nimport {Colors, moderateScale} from '../../theme';\nimport styling from './UsersStyle';\n\nconst UsersScreen = ({navigation}) => {\n  const route = useRoute();\n  const theme = route?.params?.theme;\n  const styles = styling(theme);\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.headerParent}>\n        <CustomHeader\n          theme={theme}\n          headerTitle={Strings.users}\n          onPressBack={() => navigation.goBack()}\n        />\n        <TouchableOpacity\n          onPress={() => navigation.navigate(navigationStrings.ADDUSERREQ)}>\n          <Feather\n            name=\"user-plus\"\n            size={moderateScale(24)}\n            color={Colors[theme]?.blue}\n          />\n        </TouchableOpacity>\n      </View>\n      <View style={styles.container}>\n        <TouchableOpacity style={styles.card}>\n          <View>\n            <Text style={styles.username}>{'Username'}</Text>\n            <Text style={styles.usermail}>{'User Email'}</Text>\n          </View>\n          <Text style={styles.userType}>{'User type'}</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default UsersScreen;\n"],"mappings":"AAAA,SAAQA,QAAQ,QAAO,0BAA0B;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAE1B,OAAOC,OAAO;AACd,SAAQC,YAAY;AACpB,SAAQC,iBAAiB,EAAEC,OAAO;AAClC,SAAQC,MAAM,EAAEC,aAAa;AAC7B,OAAOC,OAAO;AAAqB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEnC,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA,EAAqB;EAAA,IAAAC,aAAA,EAAAC,aAAA;EAAA,IAAhBC,UAAU,GAAAH,IAAA,CAAVG,UAAU;EAC9B,IAAMC,KAAK,GAAGrB,QAAQ,CAAC,CAAC;EACxB,IAAMsB,KAAK,GAAGD,KAAK,qBAAAH,aAAA,GAALG,KAAK,CAAEE,MAAM,qBAAbL,aAAA,CAAeI,KAAK;EAClC,IAAME,MAAM,GAAGb,OAAO,CAACW,KAAK,CAAC;EAE7B,OACEP,KAAA,CAACX,IAAI;IAACqB,KAAK,EAAED,MAAM,CAACE,MAAO;IAAAC,QAAA,GACzBZ,KAAA,CAACX,IAAI;MAACqB,KAAK,EAAED,MAAM,CAACI,YAAa;MAAAD,QAAA,GAC/Bd,IAAA,CAACP,YAAY;QACXgB,KAAK,EAAEA,KAAM;QACbO,WAAW,EAAErB,OAAO,CAACsB,KAAM;QAC3BC,WAAW,EAAE,SAAAA,YAAA;UAAA,OAAMX,UAAU,CAACY,MAAM,CAAC,CAAC;QAAA;MAAC,CACxC,CAAC,EACFnB,IAAA,CAACV,gBAAgB;QACf8B,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMb,UAAU,CAACc,QAAQ,CAAC3B,iBAAiB,CAAC4B,UAAU,CAAC;QAAA,CAAC;QAAAR,QAAA,EACjEd,IAAA,CAACR,OAAO;UACN+B,IAAI,EAAC,WAAW;UAChBC,IAAI,EAAE3B,aAAa,CAAC,EAAE,CAAE;UACxB4B,KAAK,GAAAnB,aAAA,GAAEV,MAAM,CAACa,KAAK,CAAC,qBAAbH,aAAA,CAAeoB;QAAK,CAC5B;MAAC,CACc,CAAC;IAAA,CACf,CAAC,EACP1B,IAAA,CAACT,IAAI;MAACqB,KAAK,EAAED,MAAM,CAACgB,SAAU;MAAAb,QAAA,EAC5BZ,KAAA,CAACZ,gBAAgB;QAACsB,KAAK,EAAED,MAAM,CAACiB,IAAK;QAAAd,QAAA,GACnCZ,KAAA,CAACX,IAAI;UAAAuB,QAAA,GACHd,IAAA,CAACX,IAAI;YAACuB,KAAK,EAAED,MAAM,CAACkB,QAAS;YAAAf,QAAA,EAAE;UAAU,CAAO,CAAC,EACjDd,IAAA,CAACX,IAAI;YAACuB,KAAK,EAAED,MAAM,CAACmB,QAAS;YAAAhB,QAAA,EAAE;UAAY,CAAO,CAAC;QAAA,CAC/C,CAAC,EACPd,IAAA,CAACX,IAAI;UAACuB,KAAK,EAAED,MAAM,CAACoB,QAAS;UAAAjB,QAAA,EAAE;QAAW,CAAO,CAAC;MAAA,CAClC;IAAC,CACf,CAAC;EAAA,CACH,CAAC;AAEX,CAAC;AAED,eAAeX,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}