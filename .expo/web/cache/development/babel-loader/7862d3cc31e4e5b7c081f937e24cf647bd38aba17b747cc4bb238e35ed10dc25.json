{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRoute } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { showMessage } from 'react-native-flash-message';\nimport { TextInput } from 'react-native-paper';\nimport { useDispatch } from 'react-redux';\nimport { CustomButton, CustomHeader } from \"../../components\";\nimport { navigationStrings, Strings } from \"../../constants\";\nimport { forgotPassWord } from \"../../redux/actions/ach\";\nimport { showLoader } from \"../../redux/actions/user\";\nimport { Colors } from \"../../theme\";\nimport styling from \"./ResetPasswordStyle\";\nimport { Icons } from \"../../assets\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ResetPasswordScreen = function ResetPasswordScreen(_ref) {\n  var _route$params, _Strings$resetPasswor, _ref2, _Colors$theme;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var theme = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.theme;\n  var styles = styling(theme);\n  var dispatch = useDispatch();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    emailError = _useState4[0],\n    setEmailError = _useState4[1];\n  var resetPassword = (_Strings$resetPasswor = Strings.resetPassword) == null ? void 0 : _Strings$resetPasswor.replace('?', '');\n  var onPressHeaderBack = function onPressHeaderBack() {\n    navigation.goBack();\n  };\n  var validation = function validation() {\n    var isValid = false;\n    if (email.length === 0) {\n      isValid = true;\n      setEmailError('Please enter an email.');\n    }\n    return isValid;\n  };\n  var onLogin = function onLogin() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      if (!validation()) {\n        var _reset_response$data;\n        yield dispatch(showLoader(true));\n        var data = {\n          email_or_phone: email\n        };\n        var reset_response = yield forgotPassWord(data);\n        console.log('------res', reset_response == null ? void 0 : reset_response.data);\n        yield dispatch(showLoader(false));\n        if ((reset_response == null ? void 0 : (_reset_response$data = reset_response.data) == null ? void 0 : _reset_response$data.status) === 1) {\n          var _reset_response$data2;\n          navigation.navigate(navigationStrings.OTPVERIFY, {\n            verification_code: reset_response == null ? void 0 : (_reset_response$data2 = reset_response.data) == null ? void 0 : _reset_response$data2.verification_code,\n            email: email\n          });\n        } else {\n          var _reset_response$data3;\n          showMessage({\n            message: `${reset_response == null ? void 0 : (_reset_response$data3 = reset_response.data) == null ? void 0 : _reset_response$data3.message}`,\n            type: \"danger\"\n          });\n        }\n      }\n    })).apply(this, arguments);\n  };\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(CustomHeader, {\n      theme: theme,\n      headerTitleStyle: styles.headerTitle,\n      headerStyle: styles.header,\n      onPressBack: onPressHeaderBack\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.applogoParent,\n        children: [_jsx(Image, {\n          source: Icons.appLogo,\n          style: styles.appLogo,\n          resizeMode: \"contain\"\n        }), _jsx(Text, {\n          style: styles.loginStyle,\n          children: 'Reset \\nPassword'\n        })]\n      }), _jsxs(View, {\n        style: styles.card,\n        children: [_jsx(Text, {\n          style: styles.emailQuestion,\n          children: Strings.emailQuestion\n        }), _jsx(TextInput, {\n          mode: 'outlined',\n          theme: {\n            roundness: 45\n          },\n          label: Strings.email,\n          style: styles.textInput,\n          activeOutlineColor: (_Colors$theme = Colors[theme]) == null ? void 0 : _Colors$theme.black,\n          value: email,\n          onChangeText: function onChangeText(text) {\n            setEmailError('');\n            setEmail(text);\n          }\n        }), (emailError == null ? void 0 : emailError.length) > 0 && _jsx(Text, {\n          style: styles.errorText,\n          children: emailError\n        })]\n      }), _jsx(View, {\n        style: styles.ConfirmParent,\n        children: _jsx(CustomButton, {\n          theme: theme,\n          onBtnPress: function onBtnPress() {\n            return onLogin();\n          },\n          buttonTitle: Strings.confirm,\n          buttonStyle: styles.confirmBtn,\n          buttonTitleStyle: styles.confirmText\n        })\n      })]\n    })]\n  });\n};\nexport default ResetPasswordScreen;","map":{"version":3,"names":["useRoute","React","useState","Text","View","Image","showMessage","TextInput","useDispatch","CustomButton","CustomHeader","navigationStrings","Strings","forgotPassWord","showLoader","Colors","styling","Icons","jsx","_jsx","jsxs","_jsxs","ResetPasswordScreen","_ref","_route$params","_Strings$resetPasswor","_ref2","_Colors$theme","navigation","route","theme","params","styles","dispatch","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","emailError","setEmailError","resetPassword","replace","onPressHeaderBack","goBack","validation","isValid","length","onLogin","_asyncToGenerator","_reset_response$data","data","email_or_phone","reset_response","console","log","status","_reset_response$data2","navigate","OTPVERIFY","verification_code","_reset_response$data3","message","type","apply","arguments","style","screen","children","headerTitleStyle","headerTitle","headerStyle","header","onPressBack","container","applogoParent","source","appLogo","resizeMode","loginStyle","card","emailQuestion","mode","roundness","label","textInput","activeOutlineColor","black","value","onChangeText","text","errorText","ConfirmParent","onBtnPress","buttonTitle","confirm","buttonStyle","confirmBtn","buttonTitleStyle","confirmText"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/src/modules/ResetPassword/ResetPasswordScreen.js"],"sourcesContent":["import { useRoute } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { Text, View,Image} from 'react-native';\nimport { showMessage } from 'react-native-flash-message';\nimport { TextInput } from 'react-native-paper';\nimport { useDispatch } from 'react-redux';\nimport { CustomButton, CustomHeader } from '../../components';\nimport { navigationStrings, Strings } from '../../constants';\nimport { forgotPassWord } from '../../redux/actions/ach';\nimport { showLoader } from '../../redux/actions/user';\nimport { Colors } from '../../theme';\nimport styling from './ResetPasswordStyle';\nimport { Icons } from '../../assets';\n\nconst ResetPasswordScreen = ({ navigation }) => {\n  const route = useRoute();\n  const theme = route?.params?.theme;\n  const styles = styling(theme);\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('')\n  const [emailError, setEmailError] = useState('')\n  const resetPassword = Strings.resetPassword?.replace('?', '');\n  const onPressHeaderBack = () => {\n    navigation.goBack();\n  };\n\n\n  const validation = () => {\n    let isValid = false\n    if (email.length === 0) {\n      isValid = true\n      setEmailError('Please enter an email.')\n    }\n    return isValid\n  }\n  const onLogin = async () => {\n    if (!validation()) {\n      await dispatch(showLoader(true))\n      // await setToken(APP_TOKEN)\n      let data = {\n        email_or_phone: email,\n      }\n      let reset_response = await forgotPassWord(data)\n      console.log('------res', reset_response?.data)\n      await dispatch(showLoader(false))\n      if (reset_response?.data?.status === 1) {\n        navigation.navigate(navigationStrings.OTPVERIFY, { verification_code: reset_response?.data?.verification_code, email: email })\n      } else {\n        showMessage({\n          message: `${reset_response?.data?.message}`,\n          type: \"danger\",\n        });\n      }\n    }\n  }\n  return (\n    <View style={styles.screen}>\n      <CustomHeader\n        theme={theme}\n        // headerTitle={resetPassword}\n        headerTitleStyle={styles.headerTitle}\n        headerStyle={styles.header}\n        onPressBack={onPressHeaderBack}\n      />\n      <View style={styles.container}>\n      <View style={styles.applogoParent}>\n            <Image source={Icons.appLogo} style={styles.appLogo} resizeMode='contain' />\n            <Text style={styles.loginStyle}>{'Reset \\nPassword'}</Text>\n          </View>\n        <View style={styles.card}>\n          <Text style={styles.emailQuestion}>{Strings.emailQuestion}</Text>\n          <TextInput\n            mode={'outlined'}\n            theme={{ roundness: 45, }} \n            label={Strings.email}\n            style={styles.textInput}\n            activeOutlineColor={Colors[theme]?.black}\n            value={email}\n            onChangeText={(text) => {\n              setEmailError('')\n              setEmail(text)\n            }}\n          />\n          {emailError?.length > 0 && (\n            <Text style={styles.errorText}>\n              {emailError}\n            </Text>\n          )}\n        </View>\n        <View style={styles.ConfirmParent}>\n          <CustomButton\n            theme={theme}\n            onBtnPress={() => onLogin()}\n            buttonTitle={Strings.confirm}\n            buttonStyle={styles.confirmBtn}\n            buttonTitleStyle={styles.confirmText}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default ResetPasswordScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}