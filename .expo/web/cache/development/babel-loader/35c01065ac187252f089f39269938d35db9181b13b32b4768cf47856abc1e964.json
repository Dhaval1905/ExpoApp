{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRoute } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Switch, TextInput } from 'react-native-paper';\nimport FontAwesomeIcon from \"@expo/vector-icons/FontAwesome\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CustomButton, CustomHeader, ModalButton } from \"../../../components\";\nimport { Strings, type } from \"../../../constants\";\nimport { externalAccountAdd } from \"../../../redux/actions/ach\";\nimport { showLoader } from \"../../../redux/actions/user\";\nimport { Colors, moderateScale } from \"../../../theme\";\nimport styling from \"./PaperCheckStyles\";\nimport { showMessage, hideMessage } from \"react-native-flash-message\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar PaperCheckScreen = function PaperCheckScreen(_ref) {\n  var _route$params, _ref2, _Colors$theme, _Strings$legalName, _Colors$theme2, _Strings$nickname, _Colors$theme3, _Strings$bankName, _Colors$theme4, _Strings$accountNumbe, _Colors$theme5, _Strings$routingNumbe, _Colors$theme6, _Colors$theme7;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var dispatch = useDispatch();\n  var userDetails = useSelector(function (state) {\n    var _state$user;\n    return state == null ? void 0 : (_state$user = state.user) == null ? void 0 : _state$user.login;\n  });\n  var theme = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.theme;\n  var styles = styling(theme);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isSwitchOn = _useState2[0],\n    setIsSwitchOn = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isVisibleType = _useState4[0],\n    setIsVisibleType = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedType = _useState6[0],\n    setSelectedType = _useState6[1];\n  var _useState7 = useState(\"\"),\n    _useState8 = _slicedToArray(_useState7, 2),\n    legalName = _useState8[0],\n    setLegalName = _useState8[1];\n  var _useState9 = useState(\"\"),\n    _useState10 = _slicedToArray(_useState9, 2),\n    nickName = _useState10[0],\n    setNickName = _useState10[1];\n  var _useState11 = useState(\"\"),\n    _useState12 = _slicedToArray(_useState11, 2),\n    accountNumber = _useState12[0],\n    setAccountNumber = _useState12[1];\n  var _useState13 = useState(\"\"),\n    _useState14 = _slicedToArray(_useState13, 2),\n    routingNumber = _useState14[0],\n    setRoutingNumber = _useState14[1];\n  var _useState15 = useState(\"\"),\n    _useState16 = _slicedToArray(_useState15, 2),\n    bankName = _useState16[0],\n    setBankName = _useState16[1];\n  var _useState17 = useState(\"\"),\n    _useState18 = _slicedToArray(_useState17, 2),\n    legalNameError = _useState18[0],\n    setLegalNameError = _useState18[1];\n  var _useState19 = useState(\"\"),\n    _useState20 = _slicedToArray(_useState19, 2),\n    bankNameError = _useState20[0],\n    setBankNameError = _useState20[1];\n  var _useState21 = useState(\"\"),\n    _useState22 = _slicedToArray(_useState21, 2),\n    accountNumberError = _useState22[0],\n    setAccountNumberError = _useState22[1];\n  var _useState23 = useState(\"\"),\n    _useState24 = _slicedToArray(_useState23, 2),\n    routingNumberError = _useState24[0],\n    setRoutingNumberError = _useState24[1];\n  var _useState25 = useState(\"\"),\n    _useState26 = _slicedToArray(_useState25, 2),\n    accountTypeError = _useState26[0],\n    setAccountTypeError = _useState26[1];\n  var _useState27 = useState(\"US\"),\n    _useState28 = _slicedToArray(_useState27, 2),\n    country = _useState28[0],\n    setCountry = _useState28[1];\n  var validation = function validation() {\n    var isValid = false;\n    if (legalName.length === 0) {\n      isValid = true;\n      setLegalNameError('Please enter legal name.');\n    }\n    if (!selectedType) {\n      isValid = true;\n      setAccountTypeError('Please select account type.');\n    }\n    if (bankName.length === 0) {\n      isValid = true;\n      setBankNameError('Please enter bank name.');\n    }\n    if (accountNumber.length === 0) {\n      isValid = true;\n      setAccountNumberError('Please enter account number.');\n    }\n    if (routingNumber.length === 0) {\n      isValid = true;\n      setRoutingNumberError('Please enter routing number.');\n    }\n    return isValid;\n  };\n  var addAccountPress = function addAccountPress() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      if (!validation()) {\n        var _userDetails$data, _userDetails$data$per, _userDetails$data$per2, _userDetails$data2, _userDetails$data2$ac, _userDetails$data2$ac2, _res$response, _res$response$data;\n        yield dispatch(showLoader(true));\n        var date = new Date();\n        var data = {\n          account_identifiers: {\n            number: accountNumber\n          },\n          account_owner_names: [legalName],\n          metadata: {\n            date: `created at ${date.getDate()} march by ${legalName}`\n          },\n          customer_type: selectedType,\n          routing_identifiers: {\n            bank_countries: [country],\n            wire_routing_number: routingNumber,\n            bank_name: bankName\n          },\n          nickname: nickName,\n          customer_id: userDetails == null ? void 0 : (_userDetails$data = userDetails.data) == null ? void 0 : (_userDetails$data$per = _userDetails$data.personDetail) == null ? void 0 : (_userDetails$data$per2 = _userDetails$data$per[0]) == null ? void 0 : _userDetails$data$per2.id,\n          type: userDetails == null ? void 0 : (_userDetails$data2 = userDetails.data) == null ? void 0 : (_userDetails$data2$ac = _userDetails$data2.accountDetail) == null ? void 0 : (_userDetails$data2$ac2 = _userDetails$data2$ac[0]) == null ? void 0 : _userDetails$data2$ac2.account_type\n        };\n        var res = yield externalAccountAdd(data);\n        yield dispatch(showLoader(false));\n        if ((res == null ? void 0 : (_res$response = res.response) == null ? void 0 : (_res$response$data = _res$response.data) == null ? void 0 : _res$response$data.status) === 0) {\n          var _res$response2, _res$response2$data;\n          showMessage({\n            message: res == null ? void 0 : (_res$response2 = res.response) == null ? void 0 : (_res$response2$data = _res$response2.data) == null ? void 0 : _res$response2$data.message,\n            type: \"danger\"\n          });\n        } else {\n          navigation.goBack();\n        }\n      }\n    })).apply(this, arguments);\n  };\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(CustomHeader, {\n      theme: theme,\n      headerTitle: \"\",\n      onPressBack: function onPressBack() {\n        return navigation.goBack();\n      }\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.titleParent,\n        children: [_jsx(FontAwesomeIcon, {\n          name: 'bank',\n          size: moderateScale(22),\n          color: (_Colors$theme = Colors[theme]) == null ? void 0 : _Colors$theme.blue\n        }), _jsx(Text, {\n          style: styles.title,\n          children: \"Wire Transfer\"\n        })]\n      }), _jsx(View, {\n        style: styles.card,\n        children: _jsx(ScrollView, {\n          style: styles.scrollView,\n          showsVerticalScrollIndicator: false,\n          children: _jsxs(KeyboardAvoidingView, {\n            behavior: Platform.OS === 'ios' ? 'padding' : undefined,\n            style: {\n              flex: 1\n            },\n            enabled: true,\n            children: [_jsx(TextInput, {\n              mode: 'outlined',\n              label: (_Strings$legalName = Strings.legalName) == null ? void 0 : _Strings$legalName.toUpperCase(),\n              style: styles.textInput,\n              activeOutlineColor: (_Colors$theme2 = Colors[theme]) == null ? void 0 : _Colors$theme2.black,\n              value: legalName,\n              onChangeText: function onChangeText(text) {\n                setLegalName(text);\n                setLegalNameError('');\n              }\n            }), (legalNameError == null ? void 0 : legalNameError.length) > 0 && _jsx(Text, {\n              style: styles.errorText,\n              children: legalNameError\n            }), _jsx(TextInput, {\n              mode: 'outlined',\n              label: (_Strings$nickname = Strings.nickname) == null ? void 0 : _Strings$nickname.toUpperCase(),\n              style: styles.textInput,\n              activeOutlineColor: (_Colors$theme3 = Colors[theme]) == null ? void 0 : _Colors$theme3.black,\n              value: nickName,\n              onChangeText: function onChangeText(text) {\n                return setNickName(text);\n              }\n            }), _jsx(ModalButton, {\n              theme: theme,\n              buttonValue: selectedType ? selectedType : 'TYPE',\n              width: '100%',\n              onPressButton: function onPressButton() {\n                setIsVisibleType(true);\n                setAccountTypeError('');\n              }\n            }), (accountTypeError == null ? void 0 : accountTypeError.length) > 0 && _jsx(Text, {\n              style: styles.errorText,\n              children: accountTypeError\n            }), _jsx(TextInput, {\n              mode: 'outlined',\n              label: (_Strings$bankName = Strings.bankName) == null ? void 0 : _Strings$bankName.toUpperCase(),\n              style: styles.textInput,\n              activeOutlineColor: (_Colors$theme4 = Colors[theme]) == null ? void 0 : _Colors$theme4.black,\n              value: bankName,\n              onChangeText: function onChangeText(text) {\n                setBankName(text);\n                setBankNameError('');\n              }\n            }), (bankNameError == null ? void 0 : bankNameError.length) > 0 && _jsx(Text, {\n              style: styles.errorText,\n              children: bankNameError\n            }), _jsx(TextInput, {\n              mode: 'outlined',\n              label: (_Strings$accountNumbe = Strings.accountNumber) == null ? void 0 : _Strings$accountNumbe.toUpperCase(),\n              style: styles.textInput,\n              activeOutlineColor: (_Colors$theme5 = Colors[theme]) == null ? void 0 : _Colors$theme5.black,\n              value: accountNumber,\n              keyboardType: 'number-pad',\n              onChangeText: function onChangeText(text) {\n                setAccountNumber(text);\n                setAccountNumberError('');\n              }\n            }), (accountNumberError == null ? void 0 : accountNumberError.length) > 0 && _jsx(Text, {\n              style: styles.errorText,\n              children: accountNumberError\n            }), _jsx(TextInput, {\n              mode: 'outlined',\n              label: (_Strings$routingNumbe = Strings.routingNumber) == null ? void 0 : _Strings$routingNumbe.toUpperCase(),\n              style: styles.textInput,\n              activeOutlineColor: (_Colors$theme6 = Colors[theme]) == null ? void 0 : _Colors$theme6.black,\n              value: routingNumber,\n              keyboardType: 'number-pad',\n              onChangeText: function onChangeText(text) {\n                setRoutingNumber(text);\n                setRoutingNumberError('');\n              }\n            }), (routingNumberError == null ? void 0 : routingNumberError.length) > 0 && _jsx(Text, {\n              style: styles.errorText,\n              children: routingNumberError\n            }), _jsx(TextInput, {\n              mode: 'outlined',\n              label: \"US\",\n              style: styles.textInput,\n              activeOutlineColor: (_Colors$theme7 = Colors[theme]) == null ? void 0 : _Colors$theme7.black,\n              disabled: true\n            })]\n          })\n        })\n      })]\n    }), _jsx(View, {\n      style: styles.reviewButtonParent,\n      children: _jsx(CustomButton, {\n        theme: theme,\n        buttonTitle: Strings.review,\n        buttonTitleStyle: styles.review,\n        buttonStyle: styles.reviewButtonStyle,\n        onBtnPress: function onBtnPress() {\n          return addAccountPress();\n        }\n      })\n    }), _jsx(Modal, {\n      visible: isVisibleType,\n      transparent: true,\n      children: _jsx(SafeAreaView, {\n        style: styles.modalParent,\n        children: _jsxs(View, {\n          style: styles.modalContainer,\n          children: [_jsx(View, {\n            style: styles.modalHeader,\n            children: _jsx(Text, {\n              style: styles.modalTitle,\n              children: Strings.type\n            })\n          }), _jsx(View, {\n            style: styles.divider\n          }), _jsx(View, {\n            style: styles.modalList,\n            children: type == null ? void 0 : type.map(function (item, index) {\n              var _Colors$theme8;\n              var isSelected = item === selectedType;\n              return _jsxs(View, {\n                children: [_jsxs(TouchableOpacity, {\n                  style: styles.itemParent,\n                  onPress: function onPress() {\n                    setSelectedType(item);\n                    setIsVisibleType(false);\n                  },\n                  children: [_jsx(Text, {\n                    style: [styles.modalItem, isSelected && styles.selectedModalItem],\n                    children: item\n                  }), isSelected ? _jsx(Icon, {\n                    name: \"checkmark\",\n                    size: moderateScale(24),\n                    color: (_Colors$theme8 = Colors[theme]) == null ? void 0 : _Colors$theme8.blue\n                  }) : _jsx(_Fragment, {})]\n                }), _jsx(View, {\n                  style: styles.divider\n                })]\n              }, index);\n            })\n          })]\n        })\n      })\n    })]\n  });\n};\nexport default PaperCheckScreen;","map":{"version":3,"names":["useRoute","React","useState","KeyboardAvoidingView","Modal","Platform","SafeAreaView","ScrollView","Text","TouchableOpacity","View","Switch","TextInput","FontAwesomeIcon","Icon","useDispatch","useSelector","CustomButton","CustomHeader","ModalButton","Strings","type","externalAccountAdd","showLoader","Colors","moderateScale","styling","showMessage","hideMessage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PaperCheckScreen","_ref","_route$params","_ref2","_Colors$theme","_Strings$legalName","_Colors$theme2","_Strings$nickname","_Colors$theme3","_Strings$bankName","_Colors$theme4","_Strings$accountNumbe","_Colors$theme5","_Strings$routingNumbe","_Colors$theme6","_Colors$theme7","navigation","route","dispatch","userDetails","state","_state$user","user","login","theme","params","styles","_useState","_useState2","_slicedToArray","isSwitchOn","setIsSwitchOn","_useState3","_useState4","isVisibleType","setIsVisibleType","_useState5","_useState6","selectedType","setSelectedType","_useState7","_useState8","legalName","setLegalName","_useState9","_useState10","nickName","setNickName","_useState11","_useState12","accountNumber","setAccountNumber","_useState13","_useState14","routingNumber","setRoutingNumber","_useState15","_useState16","bankName","setBankName","_useState17","_useState18","legalNameError","setLegalNameError","_useState19","_useState20","bankNameError","setBankNameError","_useState21","_useState22","accountNumberError","setAccountNumberError","_useState23","_useState24","routingNumberError","setRoutingNumberError","_useState25","_useState26","accountTypeError","setAccountTypeError","_useState27","_useState28","country","setCountry","validation","isValid","length","addAccountPress","_asyncToGenerator","_userDetails$data","_userDetails$data$per","_userDetails$data$per2","_userDetails$data2","_userDetails$data2$ac","_userDetails$data2$ac2","_res$response","_res$response$data","date","Date","data","account_identifiers","number","account_owner_names","metadata","getDate","customer_type","routing_identifiers","bank_countries","wire_routing_number","bank_name","nickname","customer_id","personDetail","id","accountDetail","account_type","res","response","status","_res$response2","_res$response2$data","message","goBack","apply","arguments","style","screen","children","headerTitle","onPressBack","container","titleParent","name","size","color","blue","title","card","scrollView","showsVerticalScrollIndicator","behavior","OS","undefined","flex","enabled","mode","label","toUpperCase","textInput","activeOutlineColor","black","value","onChangeText","text","errorText","buttonValue","width","onPressButton","keyboardType","disabled","reviewButtonParent","buttonTitle","review","buttonTitleStyle","buttonStyle","reviewButtonStyle","onBtnPress","visible","transparent","modalParent","modalContainer","modalHeader","modalTitle","divider","modalList","map","item","index","_Colors$theme8","isSelected","itemParent","onPress","modalItem","selectedModalItem"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/src/modules/AddPayee/PaperCheck/PaperCheckScreen.js"],"sourcesContent":["import { useRoute } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport {\n  KeyboardAvoidingView,\n  Modal,\n  Platform,\n  SafeAreaView,\n  ScrollView,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { Switch, TextInput } from 'react-native-paper';\nimport FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\nimport Icon from 'react-native-vector-icons/Ionicons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CustomButton, CustomHeader, ModalButton } from '../../../components';\nimport { Strings, type } from '../../../constants';\nimport { externalAccountAdd } from '../../../redux/actions/ach';\nimport { showLoader } from '../../../redux/actions/user';\nimport { Colors, moderateScale } from '../../../theme';\nimport styling from './PaperCheckStyles';\nimport { showMessage, hideMessage } from \"react-native-flash-message\";\n\nconst PaperCheckScreen = ({ navigation }) => {\n  const route = useRoute();\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state?.user?.login)\n  const theme = route?.params?.theme;\n  const styles = styling(theme);\n  const [isSwitchOn, setIsSwitchOn] = useState(false);\n  const [isVisibleType, setIsVisibleType] = useState(false);\n  const [selectedType, setSelectedType] = useState(false);\n\n  const [legalName, setLegalName] = useState(\"\");\n  const [nickName, setNickName] = useState(\"\");\n  // const [Type, setType] = useState(\"\");\n  const [accountNumber, setAccountNumber] = useState(\"\");\n  const [routingNumber, setRoutingNumber] = useState(\"\");\n  const [bankName, setBankName] = useState(\"\");\n  const [legalNameError, setLegalNameError] = useState(\"\");\n  const [bankNameError, setBankNameError] = useState(\"\");\n  const [accountNumberError, setAccountNumberError] = useState(\"\");\n  const [routingNumberError, setRoutingNumberError] = useState(\"\");\n  const [accountTypeError, setAccountTypeError] = useState(\"\");\n  const [country, setCountry] = useState(\"US\");\n\n  const validation = () => {\n    let isValid = false\n    if (legalName.length === 0) {\n      isValid = true\n      setLegalNameError('Please enter legal name.')\n    }\n    if (!selectedType) {\n      isValid = true\n      setAccountTypeError('Please select account type.')\n    }\n    if (bankName.length === 0) {\n      isValid = true\n      setBankNameError('Please enter bank name.')\n    }\n    if (accountNumber.length === 0) {\n      isValid = true\n      setAccountNumberError('Please enter account number.')\n    }\n    if (routingNumber.length === 0) {\n      isValid = true\n      setRoutingNumberError('Please enter routing number.')\n    }\n    return isValid\n  }\n\n  const addAccountPress = async () => {\n    if (!validation()) {\n      await dispatch(showLoader(true))\n      let date = new Date()\n      let data = {\n        account_identifiers: {\n          number: accountNumber\n        },\n        account_owner_names: [\n          legalName\n        ],\n        metadata: {\n          date: `created at ${date.getDate()} march by ${legalName}`\n        },\n        customer_type: selectedType,\n        routing_identifiers: {\n          bank_countries: [\n            country\n          ],\n          wire_routing_number: routingNumber,\n          bank_name: bankName\n        },\n        nickname: nickName,\n        customer_id: userDetails?.data?.personDetail?.[0]?.id,\n        type: userDetails?.data?.accountDetail?.[0]?.account_type\n      }\n      let res = await externalAccountAdd(data)\n      await dispatch(showLoader(false))\n      if (res?.response?.data?.status === 0) {\n        showMessage({\n          message: res?.response?.data?.message,\n          type: \"danger\",\n        });\n      } else {\n        navigation.goBack()\n      }\n    }\n  }\n\n  return (\n    <View style={styles.screen}>\n      <CustomHeader\n        theme={theme}\n        headerTitle={\"\"}\n        onPressBack={() => navigation.goBack()}\n      />\n      <View style={styles.container}>\n        <View style={styles.titleParent}>\n          <FontAwesomeIcon\n            name={'bank'}\n            size={moderateScale(22)}\n            color={Colors[theme]?.blue}\n          />\n          <Text style={styles.title}>{\"Wire Transfer\"}</Text>\n        </View>\n        <View style={styles.card}>\n          <ScrollView\n            style={styles.scrollView}\n            showsVerticalScrollIndicator={false}>\n            <KeyboardAvoidingView\n              behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n              style={{ flex: 1 }}\n              enabled>\n              <TextInput\n                mode={'outlined'}\n                label={Strings.legalName?.toUpperCase()}\n                style={styles.textInput}\n                activeOutlineColor={Colors[theme]?.black}\n                value={legalName}\n                onChangeText={(text) => {\n                  setLegalName(text)\n                  setLegalNameError('')\n                }}\n              />\n              {legalNameError?.length > 0 && (\n                <Text style={styles.errorText}>\n                  {legalNameError}\n                </Text>\n              )}\n              <TextInput\n                mode={'outlined'}\n                label={Strings.nickname?.toUpperCase()}\n                style={styles.textInput}\n                activeOutlineColor={Colors[theme]?.black}\n                value={nickName}\n                onChangeText={(text) => setNickName(text)}\n              />\n              {/* <Text style={styles.onlyVisible}>{Strings.onlyVisible}</Text> */}\n              <ModalButton\n                theme={theme}\n                buttonValue={selectedType ? selectedType : 'TYPE'}\n                width={'100%'}\n                onPressButton={() => {\n                  setIsVisibleType(true)\n                  setAccountTypeError('')\n                }}\n              />\n              {accountTypeError?.length > 0 && (\n                <Text style={styles.errorText}>\n                  {accountTypeError}\n                </Text>\n              )}\n              <TextInput\n                mode={'outlined'}\n                label={Strings.bankName?.toUpperCase()}\n                style={styles.textInput}\n                activeOutlineColor={Colors[theme]?.black}\n                value={bankName}\n                onChangeText={(text) => {\n                  setBankName(text)\n                  setBankNameError('')\n                }}\n              />\n              {bankNameError?.length > 0 && (\n                <Text style={styles.errorText}>\n                  {bankNameError}\n                </Text>\n              )}\n              <TextInput\n                mode={'outlined'}\n                label={Strings.accountNumber?.toUpperCase()}\n                style={styles.textInput}\n                activeOutlineColor={Colors[theme]?.black}\n                value={accountNumber}\n                keyboardType={'number-pad'}\n                onChangeText={(text) => {\n                  setAccountNumber(text)\n                  setAccountNumberError('')\n                }}\n              />\n              {accountNumberError?.length > 0 && (\n                <Text style={styles.errorText}>\n                  {accountNumberError}\n                </Text>\n              )}\n              <TextInput\n                mode={'outlined'}\n                label={Strings.routingNumber?.toUpperCase()}\n                style={styles.textInput}\n                activeOutlineColor={Colors[theme]?.black}\n                value={routingNumber}\n                keyboardType={'number-pad'}\n                onChangeText={(text) => {\n                  setRoutingNumber(text)\n                  setRoutingNumberError('')\n                }}\n              />\n              {routingNumberError?.length > 0 && (\n                <Text style={styles.errorText}>\n                  {routingNumberError}\n                </Text>\n              )}\n              <TextInput\n                mode={'outlined'}\n                label={\"US\"}\n                // placeholderTextColor={\"Black\"}\n                style={styles.textInput}\n                activeOutlineColor={Colors[theme]?.black}\n                disabled\n              />\n              {/* <View style={styles.checkingAccountParent}>\n                <Text style={styles.checkingAccount}>\n                  {Strings.checkingAccount}\n                </Text>\n                <Switch\n                  value={isSwitchOn}\n                  onValueChange={() => setIsSwitchOn(!isSwitchOn)}\n                  color={Colors[theme]?.blue}\n                />\n              </View> */}\n              {/* <TextInput\n                mode={'outlined'}\n                label={Strings.emailOptional?.toUpperCase()}\n                style={styles.textInput}\n                activeOutlineColor={Colors[theme]?.black}\n              /> */}\n              {/* <TextInput\n                multiline\n                mode={'outlined'}\n                label={Strings.notes}\n                placeholder={Strings.notes}\n                defaultValue={' '}\n                style={[styles.textInput, styles.textInputMulti]}\n                textAlignVertical={'top'}\n                activeOutlineColor={Colors[theme]?.black}\n                maxLength={250}\n              /> */}\n              {/* <View style={styles.onlyVisibleParent}>\n                <Text style={styles.onlyVisible}>{Strings.onlyVisible}</Text>\n                <Text style={styles.rangeText}>0/250</Text>\n              </View> */}\n            </KeyboardAvoidingView>\n          </ScrollView>\n        </View>\n      </View>\n      <View style={styles.reviewButtonParent}>\n        <CustomButton\n          theme={theme}\n          buttonTitle={Strings.review}\n          buttonTitleStyle={styles.review}\n          buttonStyle={styles.reviewButtonStyle}\n          onBtnPress={() => addAccountPress()}\n        />\n      </View>\n      <Modal visible={isVisibleType} transparent>\n        <SafeAreaView style={styles.modalParent}>\n          <View style={styles.modalContainer}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>{Strings.type}</Text>\n            </View>\n            <View style={styles.divider} />\n            <View style={styles.modalList}>\n              {type?.map((item, index) => {\n                const isSelected = item === selectedType;\n                return (\n                  <View key={index}>\n                    <TouchableOpacity\n                      style={styles.itemParent}\n                      onPress={() => {\n                        setSelectedType(item);\n                        setIsVisibleType(false);\n                      }}>\n                      <Text\n                        style={[\n                          styles.modalItem,\n                          isSelected && styles.selectedModalItem,\n                        ]}>\n                        {item}\n                      </Text>\n                      {isSelected ? (\n                        <Icon\n                          name=\"checkmark\"\n                          size={moderateScale(24)}\n                          color={Colors[theme]?.blue}\n                        />\n                      ) : (\n                        <></>\n                      )}\n                    </TouchableOpacity>\n                    <View style={styles.divider} />\n                  </View>\n                );\n              })}\n            </View>\n          </View>\n        </SafeAreaView>\n      </Modal>\n    </View>\n  );\n};\n\nexport default PaperCheckScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}