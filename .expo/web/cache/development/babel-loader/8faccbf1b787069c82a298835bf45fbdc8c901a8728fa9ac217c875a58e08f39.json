{"ast":null,"code":"import { useRoute } from '@react-navigation/native';\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput } from 'react-native-paper';\nimport { CustomButton, CustomHeader } from \"../../components\";\nimport { Strings } from \"../../constants\";\nimport { Colors } from \"../../theme\";\nimport styling from \"./EditDbaStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EditDbaScreen = function EditDbaScreen(_ref) {\n  var _route$params, _Strings$dba, _Colors$theme;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var theme = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.theme;\n  var styles = styling(theme);\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(CustomHeader, {\n      theme: theme,\n      headerTitle: Strings.editDba,\n      onPressBack: function onPressBack() {\n        return navigation.goBack();\n      }\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.card,\n        children: [_jsx(Text, {\n          style: styles.cardTitle,\n          children: Strings.dbaQuestion\n        }), _jsx(TextInput, {\n          label: (_Strings$dba = Strings.dba) == null ? void 0 : _Strings$dba.toUpperCase(),\n          mode: 'outlined',\n          style: styles.textInput,\n          activeOutlineColor: (_Colors$theme = Colors[theme]) == null ? void 0 : _Colors$theme.grey500\n        })]\n      })\n    }), _jsx(View, {\n      style: styles.bottomView,\n      children: _jsx(CustomButton, {\n        theme: theme,\n        buttonTitle: Strings.continue,\n        buttonStyle: styles.continueButton\n      })\n    })]\n  });\n};\nexport default EditDbaScreen;","map":{"version":3,"names":["useRoute","React","Text","View","TextInput","CustomButton","CustomHeader","Strings","Colors","styling","jsx","_jsx","jsxs","_jsxs","EditDbaScreen","_ref","_route$params","_Strings$dba","_Colors$theme","navigation","route","theme","params","styles","style","screen","children","headerTitle","editDba","onPressBack","goBack","container","card","cardTitle","dbaQuestion","label","dba","toUpperCase","mode","textInput","activeOutlineColor","grey500","bottomView","buttonTitle","continue","buttonStyle","continueButton"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/src/modules/EditDba/EditDbaScreen.js"],"sourcesContent":["import {useRoute} from '@react-navigation/native';\nimport React from 'react';\nimport {Text, View} from 'react-native';\nimport {TextInput} from 'react-native-paper';\nimport {CustomButton, CustomHeader} from '../../components';\nimport {Strings} from '../../constants';\nimport {Colors} from '../../theme';\nimport styling from './EditDbaStyle';\n\nconst EditDbaScreen = ({navigation}) => {\n  const route = useRoute();\n  const theme = route?.params?.theme;\n  const styles = styling(theme);\n\n  return (\n    <View style={styles.screen}>\n      <CustomHeader\n        theme={theme}\n        headerTitle={Strings.editDba}\n        onPressBack={() => navigation.goBack()}\n      />\n      <View style={styles.container}>\n        <View style={styles.card}>\n          <Text style={styles.cardTitle}>{Strings.dbaQuestion}</Text>\n          <TextInput\n            label={Strings.dba?.toUpperCase()}\n            mode={'outlined'}\n            style={styles.textInput}\n            activeOutlineColor={Colors[theme]?.grey500}\n          />\n        </View>\n      </View>\n      <View style={styles.bottomView}>\n        <CustomButton\n          theme={theme}\n          buttonTitle={Strings.continue}\n          buttonStyle={styles.continueButton}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default EditDbaScreen;\n"],"mappings":"AAAA,SAAQA,QAAQ,QAAO,0BAA0B;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAE1B,SAAQC,SAAS,QAAO,oBAAoB;AAC5C,SAAQC,YAAY,EAAEC,YAAY;AAClC,SAAQC,OAAO;AACf,SAAQC,MAAM;AACd,OAAOC,OAAO;AAAuB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErC,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAqB;EAAA,IAAAC,aAAA,EAAAC,YAAA,EAAAC,aAAA;EAAA,IAAhBC,UAAU,GAAAJ,IAAA,CAAVI,UAAU;EAChC,IAAMC,KAAK,GAAGpB,QAAQ,CAAC,CAAC;EACxB,IAAMqB,KAAK,GAAGD,KAAK,qBAAAJ,aAAA,GAALI,KAAK,CAAEE,MAAM,qBAAbN,aAAA,CAAeK,KAAK;EAClC,IAAME,MAAM,GAAGd,OAAO,CAACY,KAAK,CAAC;EAE7B,OACER,KAAA,CAACV,IAAI;IAACqB,KAAK,EAAED,MAAM,CAACE,MAAO;IAAAC,QAAA,GACzBf,IAAA,CAACL,YAAY;MACXe,KAAK,EAAEA,KAAM;MACbM,WAAW,EAAEpB,OAAO,CAACqB,OAAQ;MAC7BC,WAAW,EAAE,SAAAA,YAAA;QAAA,OAAMV,UAAU,CAACW,MAAM,CAAC,CAAC;MAAA;IAAC,CACxC,CAAC,EACFnB,IAAA,CAACR,IAAI;MAACqB,KAAK,EAAED,MAAM,CAACQ,SAAU;MAAAL,QAAA,EAC5Bb,KAAA,CAACV,IAAI;QAACqB,KAAK,EAAED,MAAM,CAACS,IAAK;QAAAN,QAAA,GACvBf,IAAA,CAACT,IAAI;UAACsB,KAAK,EAAED,MAAM,CAACU,SAAU;UAAAP,QAAA,EAAEnB,OAAO,CAAC2B;QAAW,CAAO,CAAC,EAC3DvB,IAAA,CAACP,SAAS;UACR+B,KAAK,GAAAlB,YAAA,GAAEV,OAAO,CAAC6B,GAAG,qBAAXnB,YAAA,CAAaoB,WAAW,CAAC,CAAE;UAClCC,IAAI,EAAE,UAAW;UACjBd,KAAK,EAAED,MAAM,CAACgB,SAAU;UACxBC,kBAAkB,GAAAtB,aAAA,GAAEV,MAAM,CAACa,KAAK,CAAC,qBAAbH,aAAA,CAAeuB;QAAQ,CAC5C,CAAC;MAAA,CACE;IAAC,CACH,CAAC,EACP9B,IAAA,CAACR,IAAI;MAACqB,KAAK,EAAED,MAAM,CAACmB,UAAW;MAAAhB,QAAA,EAC7Bf,IAAA,CAACN,YAAY;QACXgB,KAAK,EAAEA,KAAM;QACbsB,WAAW,EAAEpC,OAAO,CAACqC,QAAS;QAC9BC,WAAW,EAAEtB,MAAM,CAACuB;MAAe,CACpC;IAAC,CACE,CAAC;EAAA,CACH,CAAC;AAEX,CAAC;AAED,eAAehC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}