{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRoute } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { showMessage } from 'react-native-flash-message';\nimport { TextInput } from 'react-native-paper';\nimport { useDispatch } from 'react-redux';\nimport { CustomButton, CustomHeader } from \"../../components\";\nimport { navigationStrings, Strings } from \"../../constants\";\nimport { resetPassword } from \"../../redux/actions/ach\";\nimport { showLoader } from \"../../redux/actions/user\";\nimport { Colors } from \"../../theme\";\nimport styling from \"./ConfirmPasswordStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ConfirmPasswordScreen = function ConfirmPasswordScreen(_ref) {\n  var _route$params, _ref2, _Colors$theme, _Colors$theme2;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var dispatch = useDispatch();\n  var theme = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.theme;\n  var styles = styling(theme);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    passwordVisible = _useState2[0],\n    setPasswordVisible = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    passwordVisible1 = _useState4[0],\n    setPasswordVisible1 = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    password = _useState6[0],\n    setPassword = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    passwordError = _useState8[0],\n    setPasswordError = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    confirmPassword = _useState10[0],\n    setConfirmPassword = _useState10[1];\n  var _useState11 = useState(''),\n    _useState12 = _slicedToArray(_useState11, 2),\n    confirmPasswordError = _useState12[0],\n    setConfirmPasswordError = _useState12[1];\n  var validation = function validation() {\n    var isValid = false;\n    if (password.length === 0) {\n      isValid = true;\n      setPasswordError('Please enter password.');\n    }\n    if (confirmPassword.length === 0) {\n      isValid = true;\n      setConfirmPasswordError('Please enter confirm password.');\n    }\n    if (confirmPassword !== password) {\n      isValid = true;\n      setConfirmPasswordError('Password and Confirm password should be match.');\n    }\n    return isValid;\n  };\n  var onLogin = function onLogin() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      if (!validation()) {\n        var _route$params2, _reset_response$data;\n        yield dispatch(showLoader(true));\n        var data = {\n          email_or_phone: route == null ? void 0 : (_route$params2 = route.params) == null ? void 0 : _route$params2.email,\n          new_password: password\n        };\n        var reset_response = yield resetPassword(data);\n        yield dispatch(showLoader(false));\n        if ((reset_response == null ? void 0 : (_reset_response$data = reset_response.data) == null ? void 0 : _reset_response$data.status) === 1) {\n          navigation.navigate(navigationStrings.AUTHSTACK);\n        } else {\n          var _reset_response$data2;\n          showMessage({\n            message: `${reset_response == null ? void 0 : (_reset_response$data2 = reset_response.data) == null ? void 0 : _reset_response$data2.message}`,\n            type: \"danger\"\n          });\n        }\n      }\n    })).apply(this, arguments);\n  };\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(CustomHeader, {\n      theme: theme,\n      onPressBack: function onPressBack() {\n        return navigation.goBack();\n      }\n    }), _jsx(ScrollView, {\n      children: _jsx(View, {\n        style: styles.container,\n        children: _jsxs(View, {\n          style: styles.card,\n          children: [_jsx(TextInput, {\n            secureTextEntry: !passwordVisible,\n            mode: 'outlined',\n            label: Strings.password,\n            style: styles.textInput,\n            activeOutlineColor: (_Colors$theme = Colors[theme]) == null ? void 0 : _Colors$theme.black,\n            onChangeText: function onChangeText(text) {\n              return setPassword(text);\n            },\n            right: passwordVisible ? _jsx(TextInput.Icon, {\n              name: 'eye-off',\n              onPress: function onPress() {\n                return setPasswordVisible(!passwordVisible);\n              }\n            }) : _jsx(TextInput.Icon, {\n              name: 'eye',\n              onPress: function onPress() {\n                return setPasswordVisible(!passwordVisible);\n              }\n            })\n          }), _jsx(TextInput, {\n            secureTextEntry: !passwordVisible1,\n            mode: 'outlined',\n            label: Strings.confirm.toUpperCase() + \" \" + Strings.password,\n            style: styles.textInput,\n            activeOutlineColor: (_Colors$theme2 = Colors[theme]) == null ? void 0 : _Colors$theme2.black,\n            onChangeText: function onChangeText(text) {\n              return setConfirmPassword(text);\n            },\n            right: passwordVisible1 ? _jsx(TextInput.Icon, {\n              name: 'eye-off',\n              onPress: function onPress() {\n                return setPasswordVisible1(!passwordVisible);\n              }\n            }) : _jsx(TextInput.Icon, {\n              name: 'eye',\n              onPress: function onPress() {\n                return setPasswordVisible1(!passwordVisible);\n              }\n            })\n          })]\n        })\n      })\n    }), _jsx(View, {\n      style: styles.ConfirmParent,\n      children: _jsx(CustomButton, {\n        theme: theme,\n        onBtnPress: function onBtnPress() {\n          return onLogin();\n        },\n        buttonTitle: Strings.confirm,\n        buttonStyle: styles.confirmBtn,\n        buttonTitleStyle: styles.confirmText\n      })\n    })]\n  });\n};\nexport default ConfirmPasswordScreen;","map":{"version":3,"names":["useRoute","React","useState","Text","View","ScrollView","showMessage","TextInput","useDispatch","CustomButton","CustomHeader","navigationStrings","Strings","resetPassword","showLoader","Colors","styling","jsx","_jsx","jsxs","_jsxs","ConfirmPasswordScreen","_ref","_route$params","_ref2","_Colors$theme","_Colors$theme2","navigation","route","dispatch","theme","params","styles","_useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","passwordVisible1","setPasswordVisible1","_useState5","_useState6","password","setPassword","_useState7","_useState8","passwordError","setPasswordError","_useState9","_useState10","confirmPassword","setConfirmPassword","_useState11","_useState12","confirmPasswordError","setConfirmPasswordError","validation","isValid","length","onLogin","_asyncToGenerator","_route$params2","_reset_response$data","data","email_or_phone","email","new_password","reset_response","status","navigate","AUTHSTACK","_reset_response$data2","message","type","apply","arguments","style","screen","children","onPressBack","goBack","container","card","secureTextEntry","mode","label","textInput","activeOutlineColor","black","onChangeText","text","right","Icon","name","onPress","confirm","toUpperCase","ConfirmParent","onBtnPress","buttonTitle","buttonStyle","confirmBtn","buttonTitleStyle","confirmText"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/src/modules/ConfirmPassword/ConfirmPasswordScreen.js"],"sourcesContent":["import { useRoute } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { Text, View, ScrollView } from 'react-native';\nimport { showMessage } from 'react-native-flash-message';\nimport { TextInput } from 'react-native-paper';\nimport { useDispatch } from 'react-redux';\nimport { CustomButton, CustomHeader } from '../../components';\nimport { navigationStrings, Strings } from '../../constants';\nimport { resetPassword } from '../../redux/actions/ach';\nimport { showLoader } from '../../redux/actions/user';\nimport { Colors } from '../../theme';\nimport styling from './ConfirmPasswordStyle';\n\nconst ConfirmPasswordScreen = ({ navigation }) => {\n  const route = useRoute();\n  const dispatch = useDispatch();\n  const theme = route?.params?.theme;\n  const styles = styling(theme);\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [passwordVisible1, setPasswordVisible1] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState('');\n\n  const validation = () => {\n    let isValid = false\n    if (password.length === 0) {\n      isValid = true\n      setPasswordError('Please enter password.')\n    }\n    if (confirmPassword.length === 0) {\n      isValid = true\n      setConfirmPasswordError('Please enter confirm password.')\n    }\n    if (confirmPassword !== password) {\n      isValid = true\n      setConfirmPasswordError('Password and Confirm password should be match.')\n    }\n    return isValid\n  }\n\n  const onLogin = async () => {\n    if (!validation()) {\n      await dispatch(showLoader(true))\n      // await setToken(APP_TOKEN)\n      let data = {\n        email_or_phone: route?.params?.email,\n        new_password: password\n      }\n      let reset_response = await resetPassword(data)\n      // await dispatch(getAccountInfo())\n      await dispatch(showLoader(false))\n      if (reset_response?.data?.status === 1) {\n        navigation.navigate(navigationStrings.AUTHSTACK)\n      } else {\n        showMessage({\n          message: `${reset_response?.data?.message}`,\n          type: \"danger\",\n        });\n      }\n    }\n  }\n\n  return (\n    <View style={styles.screen}>\n      <CustomHeader theme={theme} onPressBack={() => navigation.goBack()} />\n      <ScrollView>\n        <View style={styles.container}>\n          <View style={styles.card}>\n            <TextInput\n              secureTextEntry={!passwordVisible}\n              mode={'outlined'}\n              label={Strings.password}\n              style={styles.textInput}\n              activeOutlineColor={Colors[theme]?.black}\n              onChangeText={(text) => setPassword(text)}\n              right={\n                passwordVisible ? (\n                  <TextInput.Icon\n                    name={'eye-off'}\n                    onPress={() => setPasswordVisible(!passwordVisible)}\n                  />\n                ) : (\n                  <TextInput.Icon\n                    name={'eye'}\n                    onPress={() => setPasswordVisible(!passwordVisible)}\n                  />\n                )\n              }\n            />\n            <TextInput\n              secureTextEntry={!passwordVisible1}\n              mode={'outlined'}\n              label={Strings.confirm.toUpperCase() + \" \" + Strings.password}\n              style={styles.textInput}\n              activeOutlineColor={Colors[theme]?.black}\n              onChangeText={(text) => setConfirmPassword(text)}\n              right={\n                passwordVisible1 ? (\n                  <TextInput.Icon\n                    name={'eye-off'}\n                    onPress={() => setPasswordVisible1(!passwordVisible)}\n                  />\n                ) : (\n                  <TextInput.Icon\n                    name={'eye'}\n                    onPress={() => setPasswordVisible1(!passwordVisible)}\n                  />\n                )\n              }\n            />\n          </View>\n        </View>\n      </ScrollView>\n      <View style={styles.ConfirmParent}>\n        <CustomButton\n          theme={theme}\n          onBtnPress={() =>onLogin()}\n          buttonTitle={Strings.confirm}\n          buttonStyle={styles.confirmBtn}\n          buttonTitleStyle={styles.confirmText}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default ConfirmPasswordScreen;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAExC,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,YAAY,EAAEC,YAAY;AACnC,SAASC,iBAAiB,EAAEC,OAAO;AACnC,SAASC,aAAa;AACtB,SAASC,UAAU;AACnB,SAASC,MAAM;AACf,OAAOC,OAAO;AAA+B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE7C,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAAC,IAAA,EAAuB;EAAA,IAAAC,aAAA,EAAAC,KAAA,EAAAC,aAAA,EAAAC,cAAA;EAAA,IAAjBC,UAAU,GAAAL,IAAA,CAAVK,UAAU;EACzC,IAAMC,KAAK,GAAG5B,QAAQ,CAAC,CAAC;EACxB,IAAM6B,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAC9B,IAAMsB,KAAK,GAAGF,KAAK,qBAAAL,aAAA,GAALK,KAAK,CAAEG,MAAM,qBAAbR,aAAA,CAAeO,KAAK;EAClC,IAAME,MAAM,GAAGhB,OAAO,CAACc,KAAK,CAAC;EAC7B,IAAAG,SAAA,GAA8C/B,QAAQ,CAAC,KAAK,CAAC;IAAAgC,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtDG,eAAe,GAAAF,UAAA;IAAEG,kBAAkB,GAAAH,UAAA;EAC1C,IAAAI,UAAA,GAAgDpC,QAAQ,CAAC,KAAK,CAAC;IAAAqC,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAxDE,gBAAgB,GAAAD,UAAA;IAAEE,mBAAmB,GAAAF,UAAA;EAC5C,IAAAG,UAAA,GAAgCxC,QAAQ,CAAC,EAAE,CAAC;IAAAyC,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAA0C5C,QAAQ,CAAC,EAAE,CAAC;IAAA6C,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAA/CE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EACtC,IAAAG,UAAA,GAA8ChD,QAAQ,CAAC,EAAE,CAAC;IAAAiD,WAAA,GAAAhB,cAAA,CAAAe,UAAA;IAAnDE,eAAe,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAC1C,IAAAG,WAAA,GAAwDpD,QAAQ,CAAC,EAAE,CAAC;IAAAqD,WAAA,GAAApB,cAAA,CAAAmB,WAAA;IAA7DE,oBAAoB,GAAAD,WAAA;IAAEE,uBAAuB,GAAAF,WAAA;EAEpD,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvB,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIf,QAAQ,CAACgB,MAAM,KAAK,CAAC,EAAE;MACzBD,OAAO,GAAG,IAAI;MACdV,gBAAgB,CAAC,wBAAwB,CAAC;IAC5C;IACA,IAAIG,eAAe,CAACQ,MAAM,KAAK,CAAC,EAAE;MAChCD,OAAO,GAAG,IAAI;MACdF,uBAAuB,CAAC,gCAAgC,CAAC;IAC3D;IACA,IAAIL,eAAe,KAAKR,QAAQ,EAAE;MAChCe,OAAO,GAAG,IAAI;MACdF,uBAAuB,CAAC,gDAAgD,CAAC;IAC3E;IACA,OAAOE,OAAO;EAChB,CAAC;EAED,IAAME,OAAO,YAAPA,OAAOA,CAAA;IAAA,QAAArC,KAAA,GAAAA,KAAA,IAAAsC,iBAAA,CAAG,aAAY;MAC1B,IAAI,CAACJ,UAAU,CAAC,CAAC,EAAE;QAAA,IAAAK,cAAA,EAAAC,oBAAA;QACjB,MAAMnC,QAAQ,CAACf,UAAU,CAAC,IAAI,CAAC,CAAC;QAEhC,IAAImD,IAAI,GAAG;UACTC,cAAc,EAAEtC,KAAK,qBAAAmC,cAAA,GAALnC,KAAK,CAAEG,MAAM,qBAAbgC,cAAA,CAAeI,KAAK;UACpCC,YAAY,EAAExB;QAChB,CAAC;QACD,IAAIyB,cAAc,SAASxD,aAAa,CAACoD,IAAI,CAAC;QAE9C,MAAMpC,QAAQ,CAACf,UAAU,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAAuD,cAAc,qBAAAL,oBAAA,GAAdK,cAAc,CAAEJ,IAAI,qBAApBD,oBAAA,CAAsBM,MAAM,MAAK,CAAC,EAAE;UACtC3C,UAAU,CAAC4C,QAAQ,CAAC5D,iBAAiB,CAAC6D,SAAS,CAAC;QAClD,CAAC,MAAM;UAAA,IAAAC,qBAAA;UACLnE,WAAW,CAAC;YACVoE,OAAO,EAAG,GAAEL,cAAc,qBAAAI,qBAAA,GAAdJ,cAAc,CAAEJ,IAAI,qBAApBQ,qBAAA,CAAsBC,OAAQ,EAAC;YAC3CC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF;IACF,CAAC,GAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OACEzD,KAAA,CAAChB,IAAI;IAAC0E,KAAK,EAAE9C,MAAM,CAAC+C,MAAO;IAAAC,QAAA,GACzB9D,IAAA,CAACR,YAAY;MAACoB,KAAK,EAAEA,KAAM;MAACmD,WAAW,EAAE,SAAAA,YAAA;QAAA,OAAMtD,UAAU,CAACuD,MAAM,CAAC,CAAC;MAAA;IAAC,CAAE,CAAC,EACtEhE,IAAA,CAACb,UAAU;MAAA2E,QAAA,EACT9D,IAAA,CAACd,IAAI;QAAC0E,KAAK,EAAE9C,MAAM,CAACmD,SAAU;QAAAH,QAAA,EAC5B5D,KAAA,CAAChB,IAAI;UAAC0E,KAAK,EAAE9C,MAAM,CAACoD,IAAK;UAAAJ,QAAA,GACvB9D,IAAA,CAACX,SAAS;YACR8E,eAAe,EAAE,CAACjD,eAAgB;YAClCkD,IAAI,EAAE,UAAW;YACjBC,KAAK,EAAE3E,OAAO,CAACgC,QAAS;YACxBkC,KAAK,EAAE9C,MAAM,CAACwD,SAAU;YACxBC,kBAAkB,GAAAhE,aAAA,GAAEV,MAAM,CAACe,KAAK,CAAC,qBAAbL,aAAA,CAAeiE,KAAM;YACzCC,YAAY,EAAE,SAAAA,aAACC,IAAI;cAAA,OAAK/C,WAAW,CAAC+C,IAAI,CAAC;YAAA,CAAC;YAC1CC,KAAK,EACHzD,eAAe,GACblB,IAAA,CAACX,SAAS,CAACuF,IAAI;cACbC,IAAI,EAAE,SAAU;cAChBC,OAAO,EAAE,SAAAA,QAAA;gBAAA,OAAM3D,kBAAkB,CAAC,CAACD,eAAe,CAAC;cAAA;YAAC,CACrD,CAAC,GAEFlB,IAAA,CAACX,SAAS,CAACuF,IAAI;cACbC,IAAI,EAAE,KAAM;cACZC,OAAO,EAAE,SAAAA,QAAA;gBAAA,OAAM3D,kBAAkB,CAAC,CAACD,eAAe,CAAC;cAAA;YAAC,CACrD;UAEJ,CACF,CAAC,EACFlB,IAAA,CAACX,SAAS;YACR8E,eAAe,EAAE,CAAC7C,gBAAiB;YACnC8C,IAAI,EAAE,UAAW;YACjBC,KAAK,EAAE3E,OAAO,CAACqF,OAAO,CAACC,WAAW,CAAC,CAAC,GAAG,GAAG,GAAGtF,OAAO,CAACgC,QAAS;YAC9DkC,KAAK,EAAE9C,MAAM,CAACwD,SAAU;YACxBC,kBAAkB,GAAA/D,cAAA,GAAEX,MAAM,CAACe,KAAK,CAAC,qBAAbJ,cAAA,CAAegE,KAAM;YACzCC,YAAY,EAAE,SAAAA,aAACC,IAAI;cAAA,OAAKvC,kBAAkB,CAACuC,IAAI,CAAC;YAAA,CAAC;YACjDC,KAAK,EACHrD,gBAAgB,GACdtB,IAAA,CAACX,SAAS,CAACuF,IAAI;cACbC,IAAI,EAAE,SAAU;cAChBC,OAAO,EAAE,SAAAA,QAAA;gBAAA,OAAMvD,mBAAmB,CAAC,CAACL,eAAe,CAAC;cAAA;YAAC,CACtD,CAAC,GAEFlB,IAAA,CAACX,SAAS,CAACuF,IAAI;cACbC,IAAI,EAAE,KAAM;cACZC,OAAO,EAAE,SAAAA,QAAA;gBAAA,OAAMvD,mBAAmB,CAAC,CAACL,eAAe,CAAC;cAAA;YAAC,CACtD;UAEJ,CACF,CAAC;QAAA,CACE;MAAC,CACH;IAAC,CACG,CAAC,EACblB,IAAA,CAACd,IAAI;MAAC0E,KAAK,EAAE9C,MAAM,CAACmE,aAAc;MAAAnB,QAAA,EAChC9D,IAAA,CAACT,YAAY;QACXqB,KAAK,EAAEA,KAAM;QACbsE,UAAU,EAAE,SAAAA,WAAA;UAAA,OAAKvC,OAAO,CAAC,CAAC;QAAA,CAAC;QAC3BwC,WAAW,EAAEzF,OAAO,CAACqF,OAAQ;QAC7BK,WAAW,EAAEtE,MAAM,CAACuE,UAAW;QAC/BC,gBAAgB,EAAExE,MAAM,CAACyE;MAAY,CACtC;IAAC,CACE,CAAC;EAAA,CACH,CAAC;AAEX,CAAC;AAED,eAAepF,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}