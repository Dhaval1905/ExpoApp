{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport React, { useEffect } from 'react';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { LinkIOSPresentationStyle } from \"./Types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var usePlaidEmitter = function usePlaidEmitter(LinkEventListener) {\n  useEffect(function () {\n    var emitter = new NativeEventEmitter(Platform.OS === 'ios' ? NativeModules.RNLinksdk : NativeModules.PlaidAndroid);\n    var listener = emitter.addListener('onEvent', LinkEventListener);\n    return function cleanup() {\n      listener.remove();\n    };\n  }, []);\n};\nexport var openLink = function openLink(props) {\n  return __awaiter(void 0, void 0, void 0, function* () {\n    if (props.tokenConfig == null) {\n      console.log('The public_key is being deprecated. Learn how to upgrade to link_tokens at https://plaid.com/docs/link-token-migration-guide/');\n    }\n    var config = props.tokenConfig ? props.tokenConfig : props.publicKeyConfig;\n    if (Platform.OS === 'android') {\n      NativeModules.PlaidAndroid.startLinkActivityForResult(JSON.stringify(config), function (result) {\n        if (props.onSuccess != null) {\n          props.onSuccess(result);\n        }\n      }, function (result) {\n        if (props.onExit != null) {\n          if (result.error != null && result.error.displayMessage != null) {\n            result.error.errorDisplayMessage = result.error.displayMessage;\n          }\n          props.onExit(result);\n        }\n      });\n    } else {\n      NativeModules.RNLinksdk.create(config);\n      var presentFullScreen = props.iOSPresentationStyle == LinkIOSPresentationStyle.FULL_SCREEN;\n      NativeModules.RNLinksdk.open(presentFullScreen, function (result) {\n        if (props.onSuccess != null) {\n          props.onSuccess(result);\n        }\n      }, function (error, result) {\n        if (props.onExit != null) {\n          if (error) {\n            var data = result || {};\n            data.error = error;\n            props.onExit(data);\n          } else {\n            props.onExit(result);\n          }\n        }\n      });\n    }\n  });\n};\nexport var dismissLink = function dismissLink() {\n  if (Platform.OS === 'ios') {\n    NativeModules.RNLinksdk.dismiss();\n  }\n};\nexport var PlaidLink = function PlaidLink(props) {\n  function onPress() {\n    var _a;\n    (_a = props.onPress) === null || _a === void 0 ? void 0 : _a.call(props);\n    openLink(props);\n  }\n  return _jsx(TouchableOpacity, {\n    onPress: onPress,\n    children: props.children\n  });\n};","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","React","useEffect","NativeEventEmitter","NativeModules","Platform","TouchableOpacity","LinkIOSPresentationStyle","jsx","_jsx","usePlaidEmitter","LinkEventListener","emitter","OS","RNLinksdk","PlaidAndroid","listener","addListener","cleanup","remove","openLink","props","tokenConfig","console","log","config","publicKeyConfig","startLinkActivityForResult","JSON","stringify","onSuccess","onExit","error","displayMessage","errorDisplayMessage","create","presentFullScreen","iOSPresentationStyle","FULL_SCREEN","open","data","dismissLink","dismiss","PlaidLink","onPress","_a","call","children"],"sources":["/Users/dhavalpatel/Documents/ExpoApp/node_modules/react-native-plaid-link-sdk/dist/PlaidLink.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React, { useEffect } from 'react';\nimport { NativeEventEmitter, NativeModules, Platform, TouchableOpacity, } from 'react-native';\nimport { LinkIOSPresentationStyle, } from './Types';\n/**\n * A hook that registers a listener on the Plaid emitter for the 'onEvent' type.\n * The listener is cleaned up when this view is unmounted\n *\n * @param LinkEventListener the listener to call\n */\nexport const usePlaidEmitter = (LinkEventListener) => {\n    useEffect(() => {\n        const emitter = new NativeEventEmitter(Platform.OS === 'ios'\n            ? NativeModules.RNLinksdk\n            : NativeModules.PlaidAndroid);\n        const listener = emitter.addListener('onEvent', LinkEventListener);\n        // Clean up after this effect:\n        return function cleanup() {\n            listener.remove();\n        };\n    }, []);\n};\nexport const openLink = (props) => __awaiter(void 0, void 0, void 0, function* () {\n    if (props.tokenConfig == null) {\n        console.log('The public_key is being deprecated. Learn how to upgrade to link_tokens at https://plaid.com/docs/link-token-migration-guide/');\n    }\n    let config = props.tokenConfig ? props.tokenConfig : props.publicKeyConfig;\n    if (Platform.OS === 'android') {\n        NativeModules.PlaidAndroid.startLinkActivityForResult(JSON.stringify(config), (result) => {\n            if (props.onSuccess != null) {\n                props.onSuccess(result);\n            }\n        }, (result) => {\n            if (props.onExit != null) {\n                if (result.error != null && result.error.displayMessage != null) {\n                    //TODO(RNSDK-118): Remove errorDisplayMessage field in next major update.\n                    result.error.errorDisplayMessage = result.error.displayMessage;\n                }\n                props.onExit(result);\n            }\n        });\n    }\n    else {\n        NativeModules.RNLinksdk.create(config);\n        let presentFullScreen = props.iOSPresentationStyle == LinkIOSPresentationStyle.FULL_SCREEN;\n        NativeModules.RNLinksdk.open(presentFullScreen, (result) => {\n            if (props.onSuccess != null) {\n                props.onSuccess(result);\n            }\n        }, (error, result) => {\n            if (props.onExit != null) {\n                if (error) {\n                    var data = result || {};\n                    data.error = error;\n                    props.onExit(data);\n                }\n                else {\n                    props.onExit(result);\n                }\n            }\n        });\n    }\n});\nexport const dismissLink = () => {\n    if (Platform.OS === 'ios') {\n        NativeModules.RNLinksdk.dismiss();\n    }\n};\nexport const PlaidLink = (props) => {\n    function onPress() {\n        var _a;\n        (_a = props.onPress) === null || _a === void 0 ? void 0 : _a.call(props);\n        openLink(props);\n    }\n    return <TouchableOpacity onPress={onPress}>{props.children}</TouchableOpacity>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}